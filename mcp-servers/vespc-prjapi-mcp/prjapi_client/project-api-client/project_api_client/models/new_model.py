# coding: utf-8

"""
    STAIoTCraft - Project API

    REST API to access STAIoTCraft Back-End web-service User Projects

    The version of the OpenAPI document: 3.0.7
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from project_api_client.models.dataset import Dataset
from project_api_client.models.model_type import ModelType
from project_api_client.models.target import Target
from project_api_client.models.training_type import TrainingType
from typing import Optional, Set
from typing_extensions import Self

class NewModel(BaseModel):
    """
    NewModel
    """ # noqa: E501
    model_name_to_clone: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None
    name: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None
    model_type: Optional[ModelType] = None
    dataset: Optional[Dataset] = None
    classes: Optional[List[Annotated[str, Field(min_length=1, strict=True)]]] = None
    training_type: Optional[TrainingType] = None
    target: Optional[Target] = None
    creation_time: Optional[StrictStr] = None
    last_update_time: Optional[StrictStr] = None
    model_owner_uuid: Optional[Annotated[str, Field(strict=True)]] = None
    __properties: ClassVar[List[str]] = ["model_name_to_clone", "name", "model_type", "dataset", "classes", "training_type", "target", "creation_time", "last_update_time", "model_owner_uuid"]

    @field_validator('model_name_to_clone')
    def model_name_to_clone_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-zA-Z0-9_-]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9_-]+$/")
        return value

    @field_validator('name')
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-zA-Z0-9_-]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9_-]+$/")
        return value

    @field_validator('model_owner_uuid')
    def model_owner_uuid_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-zA-Z0-9_-]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9_-]+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NewModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dataset
        if self.dataset:
            _dict['dataset'] = self.dataset.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target
        if self.target:
            _dict['target'] = self.target.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NewModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "model_name_to_clone": obj.get("model_name_to_clone"),
            "name": obj.get("name"),
            "model_type": obj.get("model_type"),
            "dataset": Dataset.from_dict(obj["dataset"]) if obj.get("dataset") is not None else None,
            "classes": obj.get("classes"),
            "training_type": obj.get("training_type"),
            "target": Target.from_dict(obj["target"]) if obj.get("target") is not None else None,
            "creation_time": obj.get("creation_time"),
            "last_update_time": obj.get("last_update_time"),
            "model_owner_uuid": obj.get("model_owner_uuid")
        })
        return _obj


