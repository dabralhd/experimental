# coding: utf-8

"""
    STAIoTCraft - Project API

    REST API to access STAIoTCraft Back-End web-service User Projects

    The version of the OpenAPI document: 3.0.7
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AppCreateDeploymentIdRequestApplicationsInner(BaseModel):
    """
    AppCreateDeploymentIdRequestApplicationsInner
    """ # noqa: E501
    device_manifest_uri: Optional[StrictStr] = None
    device_template_id: Optional[StrictStr] = None
    device_template_uri: Optional[StrictStr] = None
    image_uri: Optional[StrictStr] = None
    module_id: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    protocol: Optional[StrictInt] = None
    binary_id: Optional[StrictInt] = None
    binary_uri: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["device_manifest_uri", "device_template_id", "device_template_uri", "image_uri", "module_id", "type", "protocol", "binary_id", "binary_uri"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppCreateDeploymentIdRequestApplicationsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppCreateDeploymentIdRequestApplicationsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "device_manifest_uri": obj.get("device_manifest_uri"),
            "device_template_id": obj.get("device_template_id"),
            "device_template_uri": obj.get("device_template_uri"),
            "image_uri": obj.get("image_uri"),
            "module_id": obj.get("module_id"),
            "type": obj.get("type"),
            "protocol": obj.get("protocol"),
            "binary_id": obj.get("binary_id"),
            "binary_uri": obj.get("binary_uri")
        })
        return _obj


