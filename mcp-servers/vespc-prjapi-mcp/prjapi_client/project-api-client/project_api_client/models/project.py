# coding: utf-8

"""
    STAIoTCraft - Project API

    REST API to access STAIoTCraft Back-End web-service User Projects

    The version of the OpenAPI document: 3.0.7
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from project_api_client.models.deployment import Deployment
from project_api_client.models.model import Model
from typing import Optional, Set
from typing_extensions import Self

class Project(BaseModel):
    """
    Project
    """ # noqa: E501
    uuid: Annotated[str, Field(strict=True)]
    ai_project_name: Annotated[str, Field(min_length=1, strict=True)]
    display_name: Optional[StrictStr] = None
    description: StrictStr
    reference: Optional[StrictStr] = None
    version: StrictStr
    creation_time: StrictStr
    last_update_time: StrictStr
    models: List[Model]
    deployments: Optional[List[Deployment]] = None
    __properties: ClassVar[List[str]] = ["uuid", "ai_project_name", "display_name", "description", "reference", "version", "creation_time", "last_update_time", "models", "deployments"]

    @field_validator('uuid')
    def uuid_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9_-]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9_-]+$/")
        return value

    @field_validator('ai_project_name')
    def ai_project_name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9_-]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9_-]+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Project from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in models (list)
        _items = []
        if self.models:
            for _item_models in self.models:
                if _item_models:
                    _items.append(_item_models.to_dict())
            _dict['models'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in deployments (list)
        _items = []
        if self.deployments:
            for _item_deployments in self.deployments:
                if _item_deployments:
                    _items.append(_item_deployments.to_dict())
            _dict['deployments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Project from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "ai_project_name": obj.get("ai_project_name"),
            "display_name": obj.get("display_name"),
            "description": obj.get("description"),
            "reference": obj.get("reference"),
            "version": obj.get("version"),
            "creation_time": obj.get("creation_time"),
            "last_update_time": obj.get("last_update_time"),
            "models": [Model.from_dict(_item) for _item in obj["models"]] if obj.get("models") is not None else None,
            "deployments": [Deployment.from_dict(_item) for _item in obj["deployments"]] if obj.get("deployments") is not None else None
        })
        return _obj


