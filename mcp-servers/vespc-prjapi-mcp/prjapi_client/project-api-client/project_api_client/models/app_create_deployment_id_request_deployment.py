# coding: utf-8

"""
    STAIoTCraft - Project API

    REST API to access STAIoTCraft Back-End web-service User Projects

    The version of the OpenAPI document: 3.0.7
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from project_api_client.models.app_create_deployment_id_request_deployment_cloud_params import AppCreateDeploymentIdRequestDeploymentCloudParams
from project_api_client.models.app_create_deployment_id_request_deployment_gateway_inner import AppCreateDeploymentIdRequestDeploymentGatewayInner
from project_api_client.models.app_create_deployment_id_request_deployment_leaf_inner import AppCreateDeploymentIdRequestDeploymentLeafInner
from typing import Optional, Set
from typing_extensions import Self

class AppCreateDeploymentIdRequestDeployment(BaseModel):
    """
    AppCreateDeploymentIdRequestDeployment
    """ # noqa: E501
    display_name: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    cloud_params: Optional[AppCreateDeploymentIdRequestDeploymentCloudParams] = None
    leaf: Optional[List[AppCreateDeploymentIdRequestDeploymentLeafInner]] = None
    gateway: Optional[List[AppCreateDeploymentIdRequestDeploymentGatewayInner]] = None
    __properties: ClassVar[List[str]] = ["display_name", "description", "cloud_params", "leaf", "gateway"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppCreateDeploymentIdRequestDeployment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cloud_params
        if self.cloud_params:
            _dict['cloud_params'] = self.cloud_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in leaf (list)
        _items = []
        if self.leaf:
            for _item_leaf in self.leaf:
                if _item_leaf:
                    _items.append(_item_leaf.to_dict())
            _dict['leaf'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in gateway (list)
        _items = []
        if self.gateway:
            for _item_gateway in self.gateway:
                if _item_gateway:
                    _items.append(_item_gateway.to_dict())
            _dict['gateway'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppCreateDeploymentIdRequestDeployment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "display_name": obj.get("display_name"),
            "description": obj.get("description"),
            "cloud_params": AppCreateDeploymentIdRequestDeploymentCloudParams.from_dict(obj["cloud_params"]) if obj.get("cloud_params") is not None else None,
            "leaf": [AppCreateDeploymentIdRequestDeploymentLeafInner.from_dict(_item) for _item in obj["leaf"]] if obj.get("leaf") is not None else None,
            "gateway": [AppCreateDeploymentIdRequestDeploymentGatewayInner.from_dict(_item) for _item in obj["gateway"]] if obj.get("gateway") is not None else None
        })
        return _obj


