# coding: utf-8

"""
    STAIoTCraft - Project API

    REST API to access STAIoTCraft Back-End web-service User Projects

    The version of the OpenAPI document: 3.0.7
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from project_api_client.models.project import Project

class TestProject(unittest.TestCase):
    """Project unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Project:
        """Test Project
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Project`
        """
        model = Project()
        if include_optional:
            return Project(
                uuid = 'z',
                ai_project_name = 'z0',
                display_name = '',
                description = '',
                reference = '',
                version = '',
                creation_time = '',
                last_update_time = '',
                models = [
                    {"name":"name","dataset":{"dataset_id":"dataset_id","name":"dataset_name"},"metadata":{"type":"classifier","classes":["classes","classes"]},"uuid":"uuid","target":{"type":"type","component":"component","device":"device"},"training":{"runtime":{"job_id":"job_id","tool":"tool","version":"version"},"configuration":"configuration","artifacts":["artifacts","artifacts"],"reports":["reports"],"model_owner_uuid":"model_owner_uuid"}}
                    ],
                deployments = [
                    {"uuid":"uuid","name":"name","display_name":"display_name","description":"description","cloud_state":"cloud_state","cloud_credentials":{"application_name":"application_name"},"leaf_devices":[{"gateway_name":"gateway_name","name":"name","display_name":"display_name","description":"description","cloud_credentials":{"id":"id"},"inference_app":{"device_model_uri":"device_model_uri","device_model_project_uri":"","firmware_uri":"","firmware_project_uri":"firmware_project_uri"},"datalogging_app":{"device_model_uri":"device_model_uri","device_model_project_uri":"","firmware_uri":"","firmware_project_uri":"firmware_project_uri"}}],"gateway_devices":[{"gateway_name":"gateway_name","name":"name","display_name":"display_name","description":"description","cloud_credentials":{"id":"id"},"inference_app":{"device_model_uri":"device_model_uri","device_model_project_uri":"","firmware_uri":"","firmware_project_uri":"firmware_project_uri"},"datalogging_app":{"device_model_uri":"device_model_uri","device_model_project_uri":"","firmware_uri":"","firmware_project_uri":"firmware_project_uri"}}]}
                    ]
            )
        else:
            return Project(
                uuid = 'z',
                ai_project_name = 'z0',
                description = '',
                version = '',
                creation_time = '',
                last_update_time = '',
                models = [
                    {"name":"name","dataset":{"dataset_id":"dataset_id","name":"dataset_name"},"metadata":{"type":"classifier","classes":["classes","classes"]},"uuid":"uuid","target":{"type":"type","component":"component","device":"device"},"training":{"runtime":{"job_id":"job_id","tool":"tool","version":"version"},"configuration":"configuration","artifacts":["artifacts","artifacts"],"reports":["reports"],"model_owner_uuid":"model_owner_uuid"}}
                    ],
        )
        """

    def testProject(self):
        """Test Project"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
