# coding: utf-8

"""
    STAIoTCraft - Project API

    REST API to access STAIoTCraft Back-End web-service User Projects

    The version of the OpenAPI document: 3.0.7
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from project_api_client.models.deployment import Deployment

class TestDeployment(unittest.TestCase):
    """Deployment unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Deployment:
        """Test Deployment
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Deployment`
        """
        model = Deployment()
        if include_optional:
            return Deployment(
                uuid = 'z',
                display_name = '0',
                description = '',
                last_deploy_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_deploy_result = 'deploy_success',
                cloud_params = project_api_client.models.deployment_cloud_params.Deployment_cloud_params(
                    type = '0', 
                    app_url = '', ),
                configuration = project_api_client.models.deployment_configuration.Deployment_configuration(
                    leaf = [
                        project_api_client.models.device.Device(
                            device_id = '', 
                            description = '', 
                            gateway_id = '', 
                            selected_model_name = '', 
                            module_id = '', 
                            configuration_uri = '', 
                            device_manifest_uri = '', 
                            device_template_uri = '', 
                            device_template_id = '', 
                            wifi_mode = '', 
                            models = [
                                project_api_client.models.device_models_inner.Device_models_inner(
                                    name = '', 
                                    datalogging = project_api_client.models.device_application.DeviceApplication(
                                        device_template_uri = '', 
                                        device_template_id = '', 
                                        protocol = 1.337, 
                                        firmware_uri = '', ), 
                                    inference = project_api_client.models.device_application.DeviceApplication(
                                        device_template_uri = '', 
                                        device_template_id = '', 
                                        protocol = 1.337, 
                                        firmware_uri = '', ), )
                                ], )
                        ], 
                    gateway = [
                        project_api_client.models.device.Device(
                            device_id = '', 
                            description = '', 
                            gateway_id = '', 
                            selected_model_name = '', 
                            module_id = '', 
                            configuration_uri = '', 
                            device_manifest_uri = '', 
                            device_template_uri = '', 
                            device_template_id = '', 
                            wifi_mode = '', )
                        ], )
            )
        else:
            return Deployment(
                uuid = 'z',
                display_name = '0',
                cloud_params = project_api_client.models.deployment_cloud_params.Deployment_cloud_params(
                    type = '0', 
                    app_url = '', ),
                configuration = project_api_client.models.deployment_configuration.Deployment_configuration(
                    leaf = [
                        project_api_client.models.device.Device(
                            device_id = '', 
                            description = '', 
                            gateway_id = '', 
                            selected_model_name = '', 
                            module_id = '', 
                            configuration_uri = '', 
                            device_manifest_uri = '', 
                            device_template_uri = '', 
                            device_template_id = '', 
                            wifi_mode = '', 
                            models = [
                                project_api_client.models.device_models_inner.Device_models_inner(
                                    name = '', 
                                    datalogging = project_api_client.models.device_application.DeviceApplication(
                                        device_template_uri = '', 
                                        device_template_id = '', 
                                        protocol = 1.337, 
                                        firmware_uri = '', ), 
                                    inference = project_api_client.models.device_application.DeviceApplication(
                                        device_template_uri = '', 
                                        device_template_id = '', 
                                        protocol = 1.337, 
                                        firmware_uri = '', ), )
                                ], )
                        ], 
                    gateway = [
                        project_api_client.models.device.Device(
                            device_id = '', 
                            description = '', 
                            gateway_id = '', 
                            selected_model_name = '', 
                            module_id = '', 
                            configuration_uri = '', 
                            device_manifest_uri = '', 
                            device_template_uri = '', 
                            device_template_id = '', 
                            wifi_mode = '', )
                        ], ),
        )
        """

    def testDeployment(self):
        """Test Deployment"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
