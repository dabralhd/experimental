# coding: utf-8

"""
    STAIoTCraft - Project API

    REST API to access STAIoTCraft Back-End web-service User Projects

    The version of the OpenAPI document: 3.0.7
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from project_api_client.models.app_update_deployment_id_request import AppUpdateDeploymentIdRequest

class TestAppUpdateDeploymentIdRequest(unittest.TestCase):
    """AppUpdateDeploymentIdRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AppUpdateDeploymentIdRequest:
        """Test AppUpdateDeploymentIdRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AppUpdateDeploymentIdRequest`
        """
        model = AppUpdateDeploymentIdRequest()
        if include_optional:
            return AppUpdateDeploymentIdRequest(
                display_name = '',
                description = '',
                last_update_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_deploy_result = 'deploy_success',
                cloud_params = project_api_client.models.app_create_deployment_id_request_deployment_cloud_params.app_create_deployment_id_request_deployment_cloud_params(
                    type = '', 
                    app_url = '', ),
                leaf = [
                    project_api_client.models.app_update_deployment_id_request_leaf_inner.app_update_deployment_id_request_leaf_inner(
                        _device_id = '', 
                        device_id = '', 
                        gateway_id = '', 
                        description = '', 
                        display_name = '', 
                        datalogging = project_api_client.models.app_create_deployment_id_request_deployment_leaf_inner_datalogging.app_create_deployment_id_request_deployment_leaf_inner_datalogging(
                            application = '', 
                            firmware_update = True, ), 
                        inference = project_api_client.models.app_create_deployment_id_request_deployment_leaf_inner_inference.app_create_deployment_id_request_deployment_leaf_inner_inference(
                            application = '', 
                            firmware_update = True, 
                            models = [
                                project_api_client.models.app_create_deployment_id_request_deployment_leaf_inner_inference_models_inner.app_create_deployment_id_request_deployment_leaf_inner_inference_models_inner(
                                    artifact_type = '', 
                                    component_name = '', 
                                    model_name_reference = '', )
                                ], ), )
                    ],
                gateway = [
                    project_api_client.models.app_update_deployment_id_request_gateway_inner.app_update_deployment_id_request_gateway_inner(
                        _device_id = '', 
                        device_id = '', 
                        application = '', 
                        description = '', 
                        display_name = '', 
                        wifi_mode = '', )
                    ]
            )
        else:
            return AppUpdateDeploymentIdRequest(
        )
        """

    def testAppUpdateDeploymentIdRequest(self):
        """Test AppUpdateDeploymentIdRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
