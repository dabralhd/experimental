diff --git a/k8s/project-api/Dockerfile b/k8s/project-api/Dockerfile
index f096df2a..3f4c6ca2 100644
--- a/k8s/project-api/Dockerfile
+++ b/k8s/project-api/Dockerfile
@@ -9,7 +9,10 @@ WORKDIR /install
 
 COPY ./pyproject.toml ./poetry.lock ./
 
-RUN poetry export | /venv/bin/python -m pip install -r /dev/stdin
+RUN poetry self add poetry-plugin-export
+
+#RUN poetry export | /venv/bin/python -m pip install -r /dev/stdin
+RUN poetry export --without-hashes | /venv/bin/python -m pip install -r /dev/stdin
 
 FROM python:3.12-slim AS run-debug
 
diff --git a/k8s/project-api/project_api/controllers/projects_controller.py b/k8s/project-api/project_api/controllers/projects_controller.py
index 42773e99..064615af 100644
--- a/k8s/project-api/project_api/controllers/projects_controller.py
+++ b/k8s/project-api/project_api/controllers/projects_controller.py
@@ -65,15 +65,17 @@ def app_create_project(user: str, body=None, is_user_project=False):  # noqa: E5
             
             #if new_project.project_name_to_clone.startswith('get_started'):
             if  is_user_project==False:
-                # This is a get_started project, proceed accordingly
-                [project_folder, project_file_path] = extract_get_started_project(project_name_to_clone, new_project_name, dest_folder)
+                # This is a get_started project, check if source project exists
+                [project_folder, project_file_path, error_code] = extract_get_started_project(project_name_to_clone, new_project_name, dest_folder)
+                if error_code != 200:
+                    return Response(status=400)
+
                 generate_project_uuid(project_file_path)
                 substitute_artifacts_project_name(project_folder, project_file_path, new_project_name)
-
                 project_repo = GlobalObjects.getInstance().getFSProjectRepo(user_id=user)      
             else:
                 logger.info(f"Cloning project {project_name_to_clone} to {new_project_name}")
-                [project_folder, project_file_path] = extract_user_project(project_name_to_clone, new_project_name, dest_folder)
+                [project_folder, project_file_path, status] = extract_user_project(project_name_to_clone, new_project_name, dest_folder)
                 logger.info(f"Project folder: {project_folder}, Project file path: {project_file_path}")
                 generate_project_uuid_custom_project(project_file_path)
                 substitute_artifacts_project_name(project_folder, project_file_path, new_project_name)
diff --git a/k8s/project-api/project_api/controllers/training_controller.py b/k8s/project-api/project_api/controllers/training_controller.py
index e5aefbff..4b0a92b3 100644
--- a/k8s/project-api/project_api/controllers/training_controller.py
+++ b/k8s/project-api/project_api/controllers/training_controller.py
@@ -19,9 +19,10 @@ from project_api.vespucciprjmng.repository.filesystem.project_file_repo import (
 import logging
 import json
 from project_api.utils.zipfolder import zip_directory
+import shutil
 
 logger = logging.getLogger(__name__)
-logger.setLevel(logging.INFO)
+logger.setLevel(logging.DEBUG)
 
 def app_create_training(user, body, project_name, model_name):  # noqa: E501
     """Create new training or update whole training section
@@ -301,6 +302,23 @@ def app_download_training_artifacts(user, body, project_name, model_name):
 
             user_workspace_path = GlobalObjects.getInstance().getFSUserWorkspaceFolder(user_id=user)
             project_repo = ProjectFileRepo(user_workspace_path)
+
+            # adapt for expert mode
+            # if downloaded artifacts contains dt and ucf file than create a copy configuration.json to configuration_processed.json
+            training_dir_path = os.path.join(project_repo, project_name, 'training')
+            config_file_path = os.path.join(training_dir_path, 'configuration.json')
+            dst_file_path = os.path.join(training_dir_path, 'configuration_processed.json')
+            
+            logger.debug(f'training_dir_path: {training_dir_path}\n config_file_path: {config_file_path}\n, dst_file_path: {dst_file_path}')
+
+            if os.path.exists(config_file_path):
+                logger.debug(f'file exists: {config_file_path}\nproceeding to copy!')
+                try:
+                    shutil.copy(src=config_file_path, dst=dst_file_path)
+                except Exception as e:
+                    print(e)
+                    logger.exception('failed to copy configuration after downloading trainig artifacts', exc_info=True)
+                    return Response('failed to copy configuration after downloading trainig artifacts', status=500)
             
             # Add the job to the job list in the training runtime
             if "job" in job_artifact:
diff --git a/k8s/project-api/project_api/services/templates_repo.py b/k8s/project-api/project_api/services/templates_repo.py
index 846449f1..3f871b40 100644
--- a/k8s/project-api/project_api/services/templates_repo.py
+++ b/k8s/project-api/project_api/services/templates_repo.py
@@ -54,7 +54,10 @@ def get_started_projects_artifacts(project_name: str, model_name: str, experimen
 def extract_get_started_project(get_started_project_name: str, new_project_name: str, dest_folder: str):
 
     # Prepare folder/file paths
-    get_started_project_folder_path = os.path.join(GET_STARTED_PROJECTS_PATH, get_started_project_name)       
+    get_started_project_folder_path = os.path.join(GET_STARTED_PROJECTS_PATH, get_started_project_name) 
+    if os.path.isdir(get_started_project_folder_path):
+            logger.error(f'source project does not exists - {get_started_project_folder_path}')
+            return [None, None, 400]
     project_folder = os.path.join(dest_folder, new_project_name)
 
     get_started_project_file_path = os.path.join(project_folder, f'ai_{get_started_project_name}.json')
@@ -64,7 +67,7 @@ def extract_get_started_project(get_started_project_name: str, new_project_name:
     shutil.copytree(get_started_project_folder_path, project_folder)
     shutil.move(get_started_project_file_path, project_file_path)
     
-    return [project_folder, project_file_path]
+    return [project_folder, project_file_path, 200]
 
 import os
 import shutil
@@ -82,7 +85,11 @@ def extract_user_project(src_project_name: str, new_project_name: str, user_ws_f
         list: A list containing the destination project folder path and the destination project JSON file path.
     """
     # Prepare folder/file paths
-    src_project_folder_path = os.path.join(user_ws_folder, src_project_name)       
+    src_project_folder_path = os.path.join(user_ws_folder, src_project_name) 
+    if os.path.isdir(src_project_folder_path):
+            logger.error(f'source project does not exists - {src_project_folder_path}')
+            return [None, None, 400]
+
     dest_project_folder_path = os.path.join(user_ws_folder, new_project_name)
 
     src_project_json_file_path = os.path.join(dest_project_folder_path, f'ai_{src_project_name}.json')
@@ -93,7 +100,7 @@ def extract_user_project(src_project_name: str, new_project_name: str, user_ws_f
     logger.info(f'moving {src_project_json_file_path} to {dest_project_json_file_path}')
     shutil.move(src_project_json_file_path, dest_project_json_file_path)
     
-    return [dest_project_folder_path, dest_project_json_file_path]
+    return [dest_project_folder_path, dest_project_json_file_path, 200]
 
 
 def project_name_substitution(config_file_path: str, script_file_path: str, original_project_name: str, new_project_name: str):
diff --git a/k8s/project-api/pyproject.toml b/k8s/project-api/pyproject.toml
index d3ec0058..1eaaeecb 100644
--- a/k8s/project-api/pyproject.toml
+++ b/k8s/project-api/pyproject.toml
@@ -5,6 +5,9 @@ description = ""
 authors = []
 readme = "README.md"
 
+[tool.poetry.requires-plugins]
+poetry-plugin-export = ">=1.8"
+
 [tool.poetry.dependencies]
 python = ">=3.8, <3.13"
 flask = "<2"
