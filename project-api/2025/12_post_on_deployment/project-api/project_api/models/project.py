# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from project_api.models.base_model_ import Model
from project_api.models.deployment import Deployment  # noqa: F401,E501
from project_api.models.input import Input  # noqa: F401,E501
from project_api.models.model import Model  # noqa: F401,E501
from project_api.models.deployment_application import DeploymentApplication
from project_api.models.output import Output  # noqa: F401,E501
from project_api import util


class Project(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, uuid: str=None, ai_project_name: str=None, ai_project_type: str=None, display_name: str=None, description: str=None, reference: str=None, version: str=None, inputs: List[Input]=None, models: List[Model]=None, applications: List[DeploymentApplication]=None, deployments: List[object]=None, creation_time: str=None, last_update_time: str=None, project_owner_uuid: str=None):  # noqa: E501
        """Project - a model defined in Swagger

        :param uuid: The uuid of this Project.  # noqa: E501
        :type uuid: str
        :param ai_project_name: The ai_project_name of this Project.  # noqa: E501
        :type ai_project_name: str
        :param display_name: The display_name of this Project.  # noqa: E501
        :type display_name: str
        :param description: The description of this Project.  # noqa: E501
        :type description: str
        :param reference: The reference of this Project.  # noqa: E501
        :type reference: str
        :param version: The version of this Project.  # noqa: E501
        :type version: str
        :param creation_time: The creation_time of this Project.  # noqa: E501
        :type creation_time: str
        :param last_update_time: The last_update_time of this Project.  # noqa: E501
        :type last_update_time: str
        :param models: The models of this Project.  # noqa: E501
        :type models: List[Model]
        :param deployments: The deployments of this Project.  # noqa: E501
        :type deployments: List[Deployment]
        :param applications: The applications of this Project.  # noqa: E501
        :type applications: List[DeploymentApplication]
        :param deployments: The deployments of this Project.  # noqa: E501
        :type deployments: List[Deployment]
        """
        self.swagger_types = {
            'uuid': str,
            'ai_project_name': str,
            'type': str,
            'display_name': str,
            'description': str,
            'reference': str,
            'version': str,
            'creation_time': str,
            'last_update_time': str,
            'project_owner_uuid': str,
            'models': List[Model],
            'deployments': List[Deployment],
            'applications': List[DeploymentApplication]

        }

        self.attribute_map = {
            'uuid': 'uuid',
            'ai_project_name': 'ai_project_name',
            'type': 'type',
            'display_name': 'display_name',
            'description': 'description',
            'reference': 'reference',
            'version': 'version',
            'models': 'models',
            'applications': 'applications',
            'deployments': 'deployments',
            'creation_time': 'creation_time',
            'last_update_time': 'last_update_time',
            'project_owner_uuid': 'project_owner_uuid'
        }
        self._uuid = uuid
        self._ai_project_name = ai_project_name
        self._type = ai_project_type
        self._display_name = display_name
        self._description = description
        self._reference = reference
        self._version = version
        self._models = models
        self._applications = applications
        self._deployments = deployments
        self._creation_time = creation_time
        self._last_update_time = last_update_time     
        self._project_owner_uuid = project_owner_uuid
    @classmethod
    def from_dict(cls, dikt) -> 'Project':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Project of this Project.  # noqa: E501
        :rtype: Project
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uuid(self) -> str:
        """Gets the uuid of this Project.


        :return: The uuid of this Project.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this Project.


        :param uuid: The uuid of this Project.
        :type uuid: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def ai_project_name(self) -> str:
        """Gets the ai_project_name of this Project.


        :return: The ai_project_name of this Project.
        :rtype: str
        """
        return self._ai_project_name

    @ai_project_name.setter
    def ai_project_name(self, ai_project_name: str):
        """Sets the ai_project_name of this Project.


        :param ai_project_name: The ai_project_name of this Project.
        :type ai_project_name: str
        """
        if ai_project_name is None:
            raise ValueError("Invalid value for `ai_project_name`, must not be `None`")  # noqa: E501

        self._ai_project_name = ai_project_name

    @property
    def type(self) -> str:
        """Gets the ai_project_type of this Project.


        :return: The ai_project_type of this Project.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, ai_project_type: str):
        """Sets the ai_project_name of this Project.


        :param ai_project_name: The ai_project_name of this Project.
        :type ai_project_name: str
        """
        if ai_project_type is None:
            raise ValueError("Invalid value for `ai_project_type`, must not be `None`")  # noqa: E501

        self._type = ai_project_type

    @property
    def display_name(self) -> str:
        """Gets the display_name of this Project.


        :return: The display_name of this Project.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name: str):
        """Sets the display_name of this Project.


        :param display_name: The display_name of this Project.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def description(self) -> str:
        """Gets the description of this Project.


        :return: The description of this Project.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Project.


        :param description: The description of this Project.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def reference(self) -> str:
        """Gets the reference of this Project.


        :return: The reference of this Project.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference: str):
        """Sets the reference of this Project.


        :param reference: The reference of this Project.
        :type reference: str
        """

        self._reference = reference

    @property
    def version(self) -> str:
        """Gets the version of this Project.


        :return: The version of this Project.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this Project.


        :param version: The version of this Project.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def models(self) -> List[Model]:
        """Gets the models of this Project.


        :return: The models of this Project.
        :rtype: List[Model]
        """
        return self._models

    @models.setter
    def models(self, models: List[Model]):
        """Sets the models of this Project.


        :param models: The models of this Project.
        :type models: List[Model]
        """
        if models is None:
            raise ValueError("Invalid value for `models`, must not be `None`")  # noqa: E501

        self._models = models

    @property
    def applications(self) -> List[DeploymentApplication]:
        """Gets the applications of this Project.


        :return: The applications of this Project.
        :rtype: List[Output]
        """
        return self._applications

    @applications.setter
    def applications(self, applications: List[DeploymentApplication]):
        """Sets the applications of this Project.


        :param applications: The applications of this Project.
        :type applications: List[DeploymentApplication]
        """
        if applications is None:
            raise ValueError("Invalid value for `outputs`, must not be `None`")  # noqa: E501

        self._applications = applications

    @property
    def deployments(self) -> List[object]:
        """Gets the deployments of this Project.


        :return: The deployments of this Project.
        :rtype: List[object]
        """
        return self._deployments

    @deployments.setter
    def deployments(self, deployments: List[object]):
        """Sets the deployments of this Project.


        :param deployments: The deployments of this Project.
        :type deployments: List[object]
        """

        self._deployments = deployments

    @property
    def creation_time(self) -> str:
        """Gets the creation_time of this Project.


        :return: The creation_time of this Project.
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time: str=None):
        """Sets the creation_time of this Project.


        :param creation_time: The creation_time of this Project.
        :type creation_time: str
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")  # noqa: E501

        self._creation_time = str(datetime.now())

    @property
    def last_update_time(self) -> str:
        """Gets the last_update_time of this Project.


        :return: The last_update_time of this Project.
        :rtype: str
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time: str):
        """Sets the last_update_time of this Project.


        :param last_update_time: The last_update_time of this Project.
        :type last_update_time: str
        """
        if last_update_time is None:
            raise ValueError("Invalid value for `last_update_time`, must not be `None`")  # noqa: E501
        self._last_update_time = last_update_time

    @property
    def project_owner_uuid(self) -> str:
        """Gets the project_owner_uuid of this Project.


        :return: The project_owner_uuid of this Project.
        :rtype: str
        """
        return self._project_owner_uuid

    @project_owner_uuid.setter
    def project_owner_uuid(self, project_owner_uuid: str):
        """Sets the project_owner_uuid of this Project.


        :param project_owner_uuid: The project_owner_uuid of this Project.
        :type project_owner_uuid: str
        """
        if project_owner_uuid is None:
            raise ValueError("Invalid value for `project_owner_uuid`, must not be `None`")  # noqa: E501

        self._project_owner_uuid = project_owner_uuid
