# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import Dict, List  # noqa: F401

from project_api import util
from project_api.models.base_model_ import Model
from project_api.models.output_type import OutputType  # noqa: F401,E501
from project_api.models.test import Test  # noqa: F401,E501
from project_api.models.tool import Tool  # noqa: F401,E501


class Output(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, uuid: str=None, output_type: OutputType=None, model_ref: str=None, best_test: str=None, tests: List[Test]=None, tools: List[Tool]=None):  # noqa: E501
        """Output - a model defined in Swagger

        :param uuid: The uuid of this Output.  # noqa: E501
        :type uuid: str
        :param output_type: The output_type of this Output.  # noqa: E501
        :type output_type: OutputType
        :param model_ref: The model_ref of this Output.  # noqa: E501
        :type model_ref: str
        :param best_test: The best_test of this Output.  # noqa: E501
        :type best_test: str
        :param tests: The tests of this Output.  # noqa: E501
        :type tests: List[Test]
        :param tools: The tools of this Output.  # noqa: E501
        :type tools: List[Tool]
        """
        self.swagger_types = {
            'uuid': str,
            'output_type': OutputType,
            'model_ref': str,
            'best_test': str,
            'tests': List[Test],
            'tools': List[Tool]
        }

        self.attribute_map = {
            'uuid': 'uuid',
            'output_type': 'output_type',
            'model_ref': 'model_ref',
            'best_test': 'best_test',
            'tests': 'tests',
            'tools': 'tools'
        }
        self._uuid = uuid
        self._output_type = output_type
        self._model_ref = model_ref
        self._best_test = best_test
        self._tests = tests
        self._tools = tools

    @classmethod
    def from_dict(cls, dikt) -> 'Output':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Output of this Output.  # noqa: E501
        :rtype: Output
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uuid(self) -> str:
        """Gets the uuid of this Output.


        :return: The uuid of this Output.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this Output.


        :param uuid: The uuid of this Output.
        :type uuid: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def output_type(self) -> OutputType:
        """Gets the output_type of this Output.


        :return: The output_type of this Output.
        :rtype: OutputType
        """
        return self._output_type

    @output_type.setter
    def output_type(self, output_type: OutputType):
        """Sets the output_type of this Output.


        :param output_type: The output_type of this Output.
        :type output_type: OutputType
        """
        if output_type is None:
            raise ValueError("Invalid value for `output_type`, must not be `None`")  # noqa: E501

        self._output_type = output_type

    @property
    def model_ref(self) -> str:
        """Gets the model_ref of this Output.


        :return: The model_ref of this Output.
        :rtype: str
        """
        return self._model_ref

    @model_ref.setter
    def model_ref(self, model_ref: str):
        """Sets the model_ref of this Output.


        :param model_ref: The model_ref of this Output.
        :type model_ref: str
        """
        if model_ref is None:
            raise ValueError("Invalid value for `model_ref`, must not be `None`")  # noqa: E501

        self._model_ref = model_ref

    @property
    def best_test(self) -> str:
        """Gets the best_test of this Output.


        :return: The best_test of this Output.
        :rtype: str
        """
        return self._best_test

    @best_test.setter
    def best_test(self, best_test: str):
        """Sets the best_test of this Output.


        :param best_test: The best_test of this Output.
        :type best_test: str
        """

        self._best_test = best_test

    @property
    def tests(self) -> List[Test]:
        """Gets the tests of this Output.


        :return: The tests of this Output.
        :rtype: List[Test]
        """
        return self._tests

    @tests.setter
    def tests(self, tests: List[Test]):
        """Sets the tests of this Output.


        :param tests: The tests of this Output.
        :type tests: List[Test]
        """
        if tests is None:
            raise ValueError("Invalid value for `tests`, must not be `None`")  # noqa: E501

        self._tests = tests

    @property
    def tools(self) -> List[Tool]:
        """Gets the tools of this Output.


        :return: The tools of this Output.
        :rtype: List[Tool]
        """
        return self._tools

    @tools.setter
    def tools(self, tools: List[Tool]):
        """Sets the tools of this Output.


        :param tools: The tools of this Output.
        :type tools: List[Tool]
        """
        if tools is None:
            raise ValueError("Invalid value for `tools`, must not be `None`")  # noqa: E501

        self._tools = tools
