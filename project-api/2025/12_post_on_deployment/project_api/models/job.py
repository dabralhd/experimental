# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import Dict, List  # noqa: F401

from project_api import util
from project_api.models.base_model_ import Model


class Job(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, version: str=None, template_id: str=None):  # noqa: E501
        """Job - a model defined in Swagger

        :param name: The name of this Job.  # noqa: E501
        :type name: str
        :param version: The version of this Job.  # noqa: E501
        :type version: str
        :param template_id: The template_id of this Job.  # noqa: E501
        :type template_id: str
        """
        self.swagger_types = {
            'name': str,
            'version': str,
            'template_id': str
        }

        self.attribute_map = {
            'name': 'name',
            'version': 'version',
            'template_id': 'template_id'
        }
        self._name = name
        self._version = version
        self._template_id = template_id

    @classmethod
    def from_dict(cls, dikt) -> 'Job':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Job of this Job.  # noqa: E501
        :rtype: Job
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Job.


        :return: The name of this Job.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Job.


        :param name: The name of this Job.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def version(self) -> str:
        """Gets the version of this Job.


        :return: The version of this Job.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this Job.


        :param version: The version of this Job.
        :type version: str
        """

        self._state = version

    @property
    def template_id(self) -> str:
        """Gets the template_id of this Job.


        :return: The executer_id of this Job.
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id: str):
        """Sets the template_id of this Job.


        :param template_id: The template_id of this Job.
        :type template_id: str
        """
        if template_id is None:
            raise ValueError("Invalid value for `template_id`, must not be `None`")  # noqa: E501

        self._template_id = template_id

