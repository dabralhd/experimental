# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.device_models import DeviceModels  # noqa: F401,E501
from swagger_server import util


class Device(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, device_id: str=None, description: str=None, gateway_id: str=None, selected_model_name: str=None, module_id: str=None, configuration_uri: str=None, device_manifest_uri: str=None, device_template_uri: str=None, device_template_id: str=None, wifi_mode: str=None, models: List[DeviceModels]=None):  # noqa: E501
        """Device - a model defined in Swagger

        :param device_id: The device_id of this Device.  # noqa: E501
        :type device_id: str
        :param description: The description of this Device.  # noqa: E501
        :type description: str
        :param gateway_id: The gateway_id of this Device.  # noqa: E501
        :type gateway_id: str
        :param selected_model_name: The selected_model_name of this Device.  # noqa: E501
        :type selected_model_name: str
        :param module_id: The module_id of this Device.  # noqa: E501
        :type module_id: str
        :param configuration_uri: The configuration_uri of this Device.  # noqa: E501
        :type configuration_uri: str
        :param device_manifest_uri: The device_manifest_uri of this Device.  # noqa: E501
        :type device_manifest_uri: str
        :param device_template_uri: The device_template_uri of this Device.  # noqa: E501
        :type device_template_uri: str
        :param device_template_id: The device_template_id of this Device.  # noqa: E501
        :type device_template_id: str
        :param wifi_mode: The wifi_mode of this Device.  # noqa: E501
        :type wifi_mode: str
        :param models: The models of this Device.  # noqa: E501
        :type models: List[DeviceModels]
        """
        self.swagger_types = {
            'device_id': str,
            'description': str,
            'gateway_id': str,
            'selected_model_name': str,
            'module_id': str,
            'configuration_uri': str,
            'device_manifest_uri': str,
            'device_template_uri': str,
            'device_template_id': str,
            'wifi_mode': str,
            'models': List[DeviceModels]
        }

        self.attribute_map = {
            'device_id': 'device_id',
            'description': 'description',
            'gateway_id': 'gateway_id',
            'selected_model_name': 'selected_model_name',
            'module_id': 'module_id',
            'configuration_uri': 'configuration_uri',
            'device_manifest_uri': 'device_manifest_uri',
            'device_template_uri': 'device_template_uri',
            'device_template_id': 'device_template_id',
            'wifi_mode': 'wifi_mode',
            'models': 'models'
        }
        self._device_id = device_id
        self._description = description
        self._gateway_id = gateway_id
        self._selected_model_name = selected_model_name
        self._module_id = module_id
        self._configuration_uri = configuration_uri
        self._device_manifest_uri = device_manifest_uri
        self._device_template_uri = device_template_uri
        self._device_template_id = device_template_id
        self._wifi_mode = wifi_mode
        self._models = models

    @classmethod
    def from_dict(cls, dikt) -> 'Device':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Device of this Device.  # noqa: E501
        :rtype: Device
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_id(self) -> str:
        """Gets the device_id of this Device.


        :return: The device_id of this Device.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id: str):
        """Sets the device_id of this Device.


        :param device_id: The device_id of this Device.
        :type device_id: str
        """
        if device_id is None:
            raise ValueError("Invalid value for `device_id`, must not be `None`")  # noqa: E501

        self._device_id = device_id

    @property
    def description(self) -> str:
        """Gets the description of this Device.


        :return: The description of this Device.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Device.


        :param description: The description of this Device.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def gateway_id(self) -> str:
        """Gets the gateway_id of this Device.


        :return: The gateway_id of this Device.
        :rtype: str
        """
        return self._gateway_id

    @gateway_id.setter
    def gateway_id(self, gateway_id: str):
        """Sets the gateway_id of this Device.


        :param gateway_id: The gateway_id of this Device.
        :type gateway_id: str
        """

        self._gateway_id = gateway_id

    @property
    def selected_model_name(self) -> str:
        """Gets the selected_model_name of this Device.


        :return: The selected_model_name of this Device.
        :rtype: str
        """
        return self._selected_model_name

    @selected_model_name.setter
    def selected_model_name(self, selected_model_name: str):
        """Sets the selected_model_name of this Device.


        :param selected_model_name: The selected_model_name of this Device.
        :type selected_model_name: str
        """

        self._selected_model_name = selected_model_name

    @property
    def module_id(self) -> str:
        """Gets the module_id of this Device.


        :return: The module_id of this Device.
        :rtype: str
        """
        return self._module_id

    @module_id.setter
    def module_id(self, module_id: str):
        """Sets the module_id of this Device.


        :param module_id: The module_id of this Device.
        :type module_id: str
        """

        self._module_id = module_id

    @property
    def configuration_uri(self) -> str:
        """Gets the configuration_uri of this Device.


        :return: The configuration_uri of this Device.
        :rtype: str
        """
        return self._configuration_uri

    @configuration_uri.setter
    def configuration_uri(self, configuration_uri: str):
        """Sets the configuration_uri of this Device.


        :param configuration_uri: The configuration_uri of this Device.
        :type configuration_uri: str
        """

        self._configuration_uri = configuration_uri

    @property
    def device_manifest_uri(self) -> str:
        """Gets the device_manifest_uri of this Device.


        :return: The device_manifest_uri of this Device.
        :rtype: str
        """
        return self._device_manifest_uri

    @device_manifest_uri.setter
    def device_manifest_uri(self, device_manifest_uri: str):
        """Sets the device_manifest_uri of this Device.


        :param device_manifest_uri: The device_manifest_uri of this Device.
        :type device_manifest_uri: str
        """

        self._device_manifest_uri = device_manifest_uri

    @property
    def device_template_uri(self) -> str:
        """Gets the device_template_uri of this Device.


        :return: The device_template_uri of this Device.
        :rtype: str
        """
        return self._device_template_uri

    @device_template_uri.setter
    def device_template_uri(self, device_template_uri: str):
        """Sets the device_template_uri of this Device.


        :param device_template_uri: The device_template_uri of this Device.
        :type device_template_uri: str
        """

        self._device_template_uri = device_template_uri

    @property
    def device_template_id(self) -> str:
        """Gets the device_template_id of this Device.


        :return: The device_template_id of this Device.
        :rtype: str
        """
        return self._device_template_id

    @device_template_id.setter
    def device_template_id(self, device_template_id: str):
        """Sets the device_template_id of this Device.


        :param device_template_id: The device_template_id of this Device.
        :type device_template_id: str
        """

        self._device_template_id = device_template_id

    @property
    def wifi_mode(self) -> str:
        """Gets the wifi_mode of this Device.


        :return: The wifi_mode of this Device.
        :rtype: str
        """
        return self._wifi_mode

    @wifi_mode.setter
    def wifi_mode(self, wifi_mode: str):
        """Sets the wifi_mode of this Device.


        :param wifi_mode: The wifi_mode of this Device.
        :type wifi_mode: str
        """

        self._wifi_mode = wifi_mode

    @property
    def models(self) -> List[DeviceModels]:
        """Gets the models of this Device.


        :return: The models of this Device.
        :rtype: List[DeviceModels]
        """
        return self._models

    @models.setter
    def models(self, models: List[DeviceModels]):
        """Sets the models of this Device.


        :param models: The models of this Device.
        :type models: List[DeviceModels]
        """

        self._models = models
