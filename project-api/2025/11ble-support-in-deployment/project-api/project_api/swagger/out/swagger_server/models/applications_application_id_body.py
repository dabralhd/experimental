# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ApplicationsApplicationIdBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, device_manifest_uri: str=None, device_template_id: str=None, device_template_uri: str=None, image_uri: str=None, module_id: str=None, type: str=None, protocol: int=None, binary_id: int=None, binary_uri: str=None):  # noqa: E501
        """ApplicationsApplicationIdBody - a model defined in Swagger

        :param device_manifest_uri: The device_manifest_uri of this ApplicationsApplicationIdBody.  # noqa: E501
        :type device_manifest_uri: str
        :param device_template_id: The device_template_id of this ApplicationsApplicationIdBody.  # noqa: E501
        :type device_template_id: str
        :param device_template_uri: The device_template_uri of this ApplicationsApplicationIdBody.  # noqa: E501
        :type device_template_uri: str
        :param image_uri: The image_uri of this ApplicationsApplicationIdBody.  # noqa: E501
        :type image_uri: str
        :param module_id: The module_id of this ApplicationsApplicationIdBody.  # noqa: E501
        :type module_id: str
        :param type: The type of this ApplicationsApplicationIdBody.  # noqa: E501
        :type type: str
        :param protocol: The protocol of this ApplicationsApplicationIdBody.  # noqa: E501
        :type protocol: int
        :param binary_id: The binary_id of this ApplicationsApplicationIdBody.  # noqa: E501
        :type binary_id: int
        :param binary_uri: The binary_uri of this ApplicationsApplicationIdBody.  # noqa: E501
        :type binary_uri: str
        """
        self.swagger_types = {
            'device_manifest_uri': str,
            'device_template_id': str,
            'device_template_uri': str,
            'image_uri': str,
            'module_id': str,
            'type': str,
            'protocol': int,
            'binary_id': int,
            'binary_uri': str
        }

        self.attribute_map = {
            'device_manifest_uri': 'device_manifest_uri',
            'device_template_id': 'device_template_id',
            'device_template_uri': 'device_template_uri',
            'image_uri': 'image_uri',
            'module_id': 'module_id',
            'type': 'type',
            'protocol': 'protocol',
            'binary_id': 'binary_id',
            'binary_uri': 'binary_uri'
        }
        self._device_manifest_uri = device_manifest_uri
        self._device_template_id = device_template_id
        self._device_template_uri = device_template_uri
        self._image_uri = image_uri
        self._module_id = module_id
        self._type = type
        self._protocol = protocol
        self._binary_id = binary_id
        self._binary_uri = binary_uri

    @classmethod
    def from_dict(cls, dikt) -> 'ApplicationsApplicationIdBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The applications_application_id_body of this ApplicationsApplicationIdBody.  # noqa: E501
        :rtype: ApplicationsApplicationIdBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_manifest_uri(self) -> str:
        """Gets the device_manifest_uri of this ApplicationsApplicationIdBody.


        :return: The device_manifest_uri of this ApplicationsApplicationIdBody.
        :rtype: str
        """
        return self._device_manifest_uri

    @device_manifest_uri.setter
    def device_manifest_uri(self, device_manifest_uri: str):
        """Sets the device_manifest_uri of this ApplicationsApplicationIdBody.


        :param device_manifest_uri: The device_manifest_uri of this ApplicationsApplicationIdBody.
        :type device_manifest_uri: str
        """

        self._device_manifest_uri = device_manifest_uri

    @property
    def device_template_id(self) -> str:
        """Gets the device_template_id of this ApplicationsApplicationIdBody.


        :return: The device_template_id of this ApplicationsApplicationIdBody.
        :rtype: str
        """
        return self._device_template_id

    @device_template_id.setter
    def device_template_id(self, device_template_id: str):
        """Sets the device_template_id of this ApplicationsApplicationIdBody.


        :param device_template_id: The device_template_id of this ApplicationsApplicationIdBody.
        :type device_template_id: str
        """

        self._device_template_id = device_template_id

    @property
    def device_template_uri(self) -> str:
        """Gets the device_template_uri of this ApplicationsApplicationIdBody.


        :return: The device_template_uri of this ApplicationsApplicationIdBody.
        :rtype: str
        """
        return self._device_template_uri

    @device_template_uri.setter
    def device_template_uri(self, device_template_uri: str):
        """Sets the device_template_uri of this ApplicationsApplicationIdBody.


        :param device_template_uri: The device_template_uri of this ApplicationsApplicationIdBody.
        :type device_template_uri: str
        """

        self._device_template_uri = device_template_uri

    @property
    def image_uri(self) -> str:
        """Gets the image_uri of this ApplicationsApplicationIdBody.


        :return: The image_uri of this ApplicationsApplicationIdBody.
        :rtype: str
        """
        return self._image_uri

    @image_uri.setter
    def image_uri(self, image_uri: str):
        """Sets the image_uri of this ApplicationsApplicationIdBody.


        :param image_uri: The image_uri of this ApplicationsApplicationIdBody.
        :type image_uri: str
        """

        self._image_uri = image_uri

    @property
    def module_id(self) -> str:
        """Gets the module_id of this ApplicationsApplicationIdBody.


        :return: The module_id of this ApplicationsApplicationIdBody.
        :rtype: str
        """
        return self._module_id

    @module_id.setter
    def module_id(self, module_id: str):
        """Sets the module_id of this ApplicationsApplicationIdBody.


        :param module_id: The module_id of this ApplicationsApplicationIdBody.
        :type module_id: str
        """

        self._module_id = module_id

    @property
    def type(self) -> str:
        """Gets the type of this ApplicationsApplicationIdBody.


        :return: The type of this ApplicationsApplicationIdBody.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this ApplicationsApplicationIdBody.


        :param type: The type of this ApplicationsApplicationIdBody.
        :type type: str
        """

        self._type = type

    @property
    def protocol(self) -> int:
        """Gets the protocol of this ApplicationsApplicationIdBody.


        :return: The protocol of this ApplicationsApplicationIdBody.
        :rtype: int
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol: int):
        """Sets the protocol of this ApplicationsApplicationIdBody.


        :param protocol: The protocol of this ApplicationsApplicationIdBody.
        :type protocol: int
        """

        self._protocol = protocol

    @property
    def binary_id(self) -> int:
        """Gets the binary_id of this ApplicationsApplicationIdBody.


        :return: The binary_id of this ApplicationsApplicationIdBody.
        :rtype: int
        """
        return self._binary_id

    @binary_id.setter
    def binary_id(self, binary_id: int):
        """Sets the binary_id of this ApplicationsApplicationIdBody.


        :param binary_id: The binary_id of this ApplicationsApplicationIdBody.
        :type binary_id: int
        """

        self._binary_id = binary_id

    @property
    def binary_uri(self) -> str:
        """Gets the binary_uri of this ApplicationsApplicationIdBody.


        :return: The binary_uri of this ApplicationsApplicationIdBody.
        :rtype: str
        """
        return self._binary_uri

    @binary_uri.setter
    def binary_uri(self, binary_uri: str):
        """Sets the binary_uri of this ApplicationsApplicationIdBody.


        :param binary_uri: The binary_uri of this ApplicationsApplicationIdBody.
        :type binary_uri: str
        """

        self._binary_uri = binary_uri
