# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.projectsproject_namedeployments_applications import ProjectsprojectNamedeploymentsApplications  # noqa: F401,E501
from swagger_server.models.projectsproject_namedeployments_deployment import ProjectsprojectNamedeploymentsDeployment  # noqa: F401,E501
from swagger_server import util


class ProjectNameDeploymentsBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, applications: List[ProjectsprojectNamedeploymentsApplications]=None, deployment: ProjectsprojectNamedeploymentsDeployment=None):  # noqa: E501
        """ProjectNameDeploymentsBody - a model defined in Swagger

        :param applications: The applications of this ProjectNameDeploymentsBody.  # noqa: E501
        :type applications: List[ProjectsprojectNamedeploymentsApplications]
        :param deployment: The deployment of this ProjectNameDeploymentsBody.  # noqa: E501
        :type deployment: ProjectsprojectNamedeploymentsDeployment
        """
        self.swagger_types = {
            'applications': List[ProjectsprojectNamedeploymentsApplications],
            'deployment': ProjectsprojectNamedeploymentsDeployment
        }

        self.attribute_map = {
            'applications': 'applications',
            'deployment': 'deployment'
        }
        self._applications = applications
        self._deployment = deployment

    @classmethod
    def from_dict(cls, dikt) -> 'ProjectNameDeploymentsBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The project_name_deployments_body of this ProjectNameDeploymentsBody.  # noqa: E501
        :rtype: ProjectNameDeploymentsBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applications(self) -> List[ProjectsprojectNamedeploymentsApplications]:
        """Gets the applications of this ProjectNameDeploymentsBody.


        :return: The applications of this ProjectNameDeploymentsBody.
        :rtype: List[ProjectsprojectNamedeploymentsApplications]
        """
        return self._applications

    @applications.setter
    def applications(self, applications: List[ProjectsprojectNamedeploymentsApplications]):
        """Sets the applications of this ProjectNameDeploymentsBody.


        :param applications: The applications of this ProjectNameDeploymentsBody.
        :type applications: List[ProjectsprojectNamedeploymentsApplications]
        """
        if applications is None:
            raise ValueError("Invalid value for `applications`, must not be `None`")  # noqa: E501

        self._applications = applications

    @property
    def deployment(self) -> ProjectsprojectNamedeploymentsDeployment:
        """Gets the deployment of this ProjectNameDeploymentsBody.


        :return: The deployment of this ProjectNameDeploymentsBody.
        :rtype: ProjectsprojectNamedeploymentsDeployment
        """
        return self._deployment

    @deployment.setter
    def deployment(self, deployment: ProjectsprojectNamedeploymentsDeployment):
        """Sets the deployment of this ProjectNameDeploymentsBody.


        :param deployment: The deployment of this ProjectNameDeploymentsBody.
        :type deployment: ProjectsprojectNamedeploymentsDeployment
        """
        if deployment is None:
            raise ValueError("Invalid value for `deployment`, must not be `None`")  # noqa: E501

        self._deployment = deployment
