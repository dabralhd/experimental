# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.device import Device  # noqa: F401,E501
from swagger_server import util


class DeploymentConfiguration(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, leaf: List[Device]=None, gateway: List[Device]=None):  # noqa: E501
        """DeploymentConfiguration - a model defined in Swagger

        :param leaf: The leaf of this DeploymentConfiguration.  # noqa: E501
        :type leaf: List[Device]
        :param gateway: The gateway of this DeploymentConfiguration.  # noqa: E501
        :type gateway: List[Device]
        """
        self.swagger_types = {
            'leaf': List[Device],
            'gateway': List[Device]
        }

        self.attribute_map = {
            'leaf': 'leaf',
            'gateway': 'gateway'
        }
        self._leaf = leaf
        self._gateway = gateway

    @classmethod
    def from_dict(cls, dikt) -> 'DeploymentConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Deployment_configuration of this DeploymentConfiguration.  # noqa: E501
        :rtype: DeploymentConfiguration
        """
        return util.deserialize_model(dikt, cls)

    @property
    def leaf(self) -> List[Device]:
        """Gets the leaf of this DeploymentConfiguration.


        :return: The leaf of this DeploymentConfiguration.
        :rtype: List[Device]
        """
        return self._leaf

    @leaf.setter
    def leaf(self, leaf: List[Device]):
        """Sets the leaf of this DeploymentConfiguration.


        :param leaf: The leaf of this DeploymentConfiguration.
        :type leaf: List[Device]
        """
        if leaf is None:
            raise ValueError("Invalid value for `leaf`, must not be `None`")  # noqa: E501

        self._leaf = leaf

    @property
    def gateway(self) -> List[Device]:
        """Gets the gateway of this DeploymentConfiguration.


        :return: The gateway of this DeploymentConfiguration.
        :rtype: List[Device]
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway: List[Device]):
        """Sets the gateway of this DeploymentConfiguration.


        :param gateway: The gateway of this DeploymentConfiguration.
        :type gateway: List[Device]
        """
        if gateway is None:
            raise ValueError("Invalid value for `gateway`, must not be `None`")  # noqa: E501

        self._gateway = gateway
