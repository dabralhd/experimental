# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.device_application import DeviceApplication  # noqa: F401,E501
from swagger_server import util


class DeviceModels(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, datalogging: DeviceApplication=None, inference: DeviceApplication=None):  # noqa: E501
        """DeviceModels - a model defined in Swagger

        :param name: The name of this DeviceModels.  # noqa: E501
        :type name: str
        :param datalogging: The datalogging of this DeviceModels.  # noqa: E501
        :type datalogging: DeviceApplication
        :param inference: The inference of this DeviceModels.  # noqa: E501
        :type inference: DeviceApplication
        """
        self.swagger_types = {
            'name': str,
            'datalogging': DeviceApplication,
            'inference': DeviceApplication
        }

        self.attribute_map = {
            'name': 'name',
            'datalogging': 'datalogging',
            'inference': 'inference'
        }
        self._name = name
        self._datalogging = datalogging
        self._inference = inference

    @classmethod
    def from_dict(cls, dikt) -> 'DeviceModels':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Device_models of this DeviceModels.  # noqa: E501
        :rtype: DeviceModels
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this DeviceModels.


        :return: The name of this DeviceModels.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this DeviceModels.


        :param name: The name of this DeviceModels.
        :type name: str
        """

        self._name = name

    @property
    def datalogging(self) -> DeviceApplication:
        """Gets the datalogging of this DeviceModels.


        :return: The datalogging of this DeviceModels.
        :rtype: DeviceApplication
        """
        return self._datalogging

    @datalogging.setter
    def datalogging(self, datalogging: DeviceApplication):
        """Sets the datalogging of this DeviceModels.


        :param datalogging: The datalogging of this DeviceModels.
        :type datalogging: DeviceApplication
        """

        self._datalogging = datalogging

    @property
    def inference(self) -> DeviceApplication:
        """Gets the inference of this DeviceModels.


        :return: The inference of this DeviceModels.
        :rtype: DeviceApplication
        """
        return self._inference

    @inference.setter
    def inference(self, inference: DeviceApplication):
        """Sets the inference of this DeviceModels.


        :param inference: The inference of this DeviceModels.
        :type inference: DeviceApplication
        """

        self._inference = inference
