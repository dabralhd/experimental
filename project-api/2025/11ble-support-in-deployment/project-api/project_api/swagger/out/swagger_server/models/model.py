# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.dataset import Dataset  # noqa: F401,E501
from swagger_server.models.model_model_metadata import ModelModelMetadata  # noqa: F401,E501
from swagger_server.models.target import Target  # noqa: F401,E501
from swagger_server.models.training import Training  # noqa: F401,E501
import re  # noqa: F401,E501
from swagger_server import util


class Model(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, dataset: Dataset=None, target: Target=None, uuid: str=None, name: str=None, metadata: ModelModelMetadata=None, training: Training=None, creation_time: str=None, last_update_time: str=None, model_owner_uuid: str=None):  # noqa: E501
        """Model - a model defined in Swagger

        :param dataset: The dataset of this Model.  # noqa: E501
        :type dataset: Dataset
        :param target: The target of this Model.  # noqa: E501
        :type target: Target
        :param uuid: The uuid of this Model.  # noqa: E501
        :type uuid: str
        :param name: The name of this Model.  # noqa: E501
        :type name: str
        :param metadata: The metadata of this Model.  # noqa: E501
        :type metadata: ModelModelMetadata
        :param training: The training of this Model.  # noqa: E501
        :type training: Training
        :param creation_time: The creation_time of this Model.  # noqa: E501
        :type creation_time: str
        :param last_update_time: The last_update_time of this Model.  # noqa: E501
        :type last_update_time: str
        :param model_owner_uuid: The model_owner_uuid of this Model.  # noqa: E501
        :type model_owner_uuid: str
        """
        self.swagger_types = {
            'dataset': Dataset,
            'target': Target,
            'uuid': str,
            'name': str,
            'metadata': ModelModelMetadata,
            'training': Training,
            'creation_time': str,
            'last_update_time': str,
            'model_owner_uuid': str
        }

        self.attribute_map = {
            'dataset': 'dataset',
            'target': 'target',
            'uuid': 'uuid',
            'name': 'name',
            'metadata': 'metadata',
            'training': 'training',
            'creation_time': 'creation_time',
            'last_update_time': 'last_update_time',
            'model_owner_uuid': 'model_owner_uuid'
        }
        self._dataset = dataset
        self._target = target
        self._uuid = uuid
        self._name = name
        self._metadata = metadata
        self._training = training
        self._creation_time = creation_time
        self._last_update_time = last_update_time
        self._model_owner_uuid = model_owner_uuid

    @classmethod
    def from_dict(cls, dikt) -> 'Model':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Model of this Model.  # noqa: E501
        :rtype: Model
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dataset(self) -> Dataset:
        """Gets the dataset of this Model.


        :return: The dataset of this Model.
        :rtype: Dataset
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset: Dataset):
        """Sets the dataset of this Model.


        :param dataset: The dataset of this Model.
        :type dataset: Dataset
        """
        if dataset is None:
            raise ValueError("Invalid value for `dataset`, must not be `None`")  # noqa: E501

        self._dataset = dataset

    @property
    def target(self) -> Target:
        """Gets the target of this Model.


        :return: The target of this Model.
        :rtype: Target
        """
        return self._target

    @target.setter
    def target(self, target: Target):
        """Sets the target of this Model.


        :param target: The target of this Model.
        :type target: Target
        """
        if target is None:
            raise ValueError("Invalid value for `target`, must not be `None`")  # noqa: E501

        self._target = target

    @property
    def uuid(self) -> str:
        """Gets the uuid of this Model.


        :return: The uuid of this Model.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this Model.


        :param uuid: The uuid of this Model.
        :type uuid: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def name(self) -> str:
        """Gets the name of this Model.


        :return: The name of this Model.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Model.


        :param name: The name of this Model.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def metadata(self) -> ModelModelMetadata:
        """Gets the metadata of this Model.


        :return: The metadata of this Model.
        :rtype: ModelModelMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: ModelModelMetadata):
        """Sets the metadata of this Model.


        :param metadata: The metadata of this Model.
        :type metadata: ModelModelMetadata
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")  # noqa: E501

        self._metadata = metadata

    @property
    def training(self) -> Training:
        """Gets the training of this Model.


        :return: The training of this Model.
        :rtype: Training
        """
        return self._training

    @training.setter
    def training(self, training: Training):
        """Sets the training of this Model.


        :param training: The training of this Model.
        :type training: Training
        """
        if training is None:
            raise ValueError("Invalid value for `training`, must not be `None`")  # noqa: E501

        self._training = training

    @property
    def creation_time(self) -> str:
        """Gets the creation_time of this Model.


        :return: The creation_time of this Model.
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time: str):
        """Sets the creation_time of this Model.


        :param creation_time: The creation_time of this Model.
        :type creation_time: str
        """

        self._creation_time = creation_time

    @property
    def last_update_time(self) -> str:
        """Gets the last_update_time of this Model.


        :return: The last_update_time of this Model.
        :rtype: str
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time: str):
        """Sets the last_update_time of this Model.


        :param last_update_time: The last_update_time of this Model.
        :type last_update_time: str
        """

        self._last_update_time = last_update_time

    @property
    def model_owner_uuid(self) -> str:
        """Gets the model_owner_uuid of this Model.


        :return: The model_owner_uuid of this Model.
        :rtype: str
        """
        return self._model_owner_uuid

    @model_owner_uuid.setter
    def model_owner_uuid(self, model_owner_uuid: str):
        """Sets the model_owner_uuid of this Model.


        :param model_owner_uuid: The model_owner_uuid of this Model.
        :type model_owner_uuid: str
        """
        if model_owner_uuid is None:
            raise ValueError("Invalid value for `model_owner_uuid`, must not be `None`")  # noqa: E501

        self._model_owner_uuid = model_owner_uuid
