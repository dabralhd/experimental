# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.projectsproject_namedeployments_deployment_inference_models import ProjectsprojectNamedeploymentsDeploymentInferenceModels  # noqa: F401,E501
from swagger_server import util


class ProjectsprojectNamedeploymentsdeploymentIdInference(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, application: str=None, firmware_update: bool=None, models: List[ProjectsprojectNamedeploymentsDeploymentInferenceModels]=None):  # noqa: E501
        """ProjectsprojectNamedeploymentsdeploymentIdInference - a model defined in Swagger

        :param application: The application of this ProjectsprojectNamedeploymentsdeploymentIdInference.  # noqa: E501
        :type application: str
        :param firmware_update: The firmware_update of this ProjectsprojectNamedeploymentsdeploymentIdInference.  # noqa: E501
        :type firmware_update: bool
        :param models: The models of this ProjectsprojectNamedeploymentsdeploymentIdInference.  # noqa: E501
        :type models: List[ProjectsprojectNamedeploymentsDeploymentInferenceModels]
        """
        self.swagger_types = {
            'application': str,
            'firmware_update': bool,
            'models': List[ProjectsprojectNamedeploymentsDeploymentInferenceModels]
        }

        self.attribute_map = {
            'application': 'application',
            'firmware_update': 'firmware_update',
            'models': 'models'
        }
        self._application = application
        self._firmware_update = firmware_update
        self._models = models

    @classmethod
    def from_dict(cls, dikt) -> 'ProjectsprojectNamedeploymentsdeploymentIdInference':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The projectsproject_namedeploymentsdeployment_id_inference of this ProjectsprojectNamedeploymentsdeploymentIdInference.  # noqa: E501
        :rtype: ProjectsprojectNamedeploymentsdeploymentIdInference
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application(self) -> str:
        """Gets the application of this ProjectsprojectNamedeploymentsdeploymentIdInference.


        :return: The application of this ProjectsprojectNamedeploymentsdeploymentIdInference.
        :rtype: str
        """
        return self._application

    @application.setter
    def application(self, application: str):
        """Sets the application of this ProjectsprojectNamedeploymentsdeploymentIdInference.


        :param application: The application of this ProjectsprojectNamedeploymentsdeploymentIdInference.
        :type application: str
        """

        self._application = application

    @property
    def firmware_update(self) -> bool:
        """Gets the firmware_update of this ProjectsprojectNamedeploymentsdeploymentIdInference.


        :return: The firmware_update of this ProjectsprojectNamedeploymentsdeploymentIdInference.
        :rtype: bool
        """
        return self._firmware_update

    @firmware_update.setter
    def firmware_update(self, firmware_update: bool):
        """Sets the firmware_update of this ProjectsprojectNamedeploymentsdeploymentIdInference.


        :param firmware_update: The firmware_update of this ProjectsprojectNamedeploymentsdeploymentIdInference.
        :type firmware_update: bool
        """

        self._firmware_update = firmware_update

    @property
    def models(self) -> List[ProjectsprojectNamedeploymentsDeploymentInferenceModels]:
        """Gets the models of this ProjectsprojectNamedeploymentsdeploymentIdInference.


        :return: The models of this ProjectsprojectNamedeploymentsdeploymentIdInference.
        :rtype: List[ProjectsprojectNamedeploymentsDeploymentInferenceModels]
        """
        return self._models

    @models.setter
    def models(self, models: List[ProjectsprojectNamedeploymentsDeploymentInferenceModels]):
        """Sets the models of this ProjectsprojectNamedeploymentsdeploymentIdInference.


        :param models: The models of this ProjectsprojectNamedeploymentsdeploymentIdInference.
        :type models: List[ProjectsprojectNamedeploymentsDeploymentInferenceModels]
        """

        self._models = models
