# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from project_api.models.base_model_ import Model
from project_api.models.device import Device
from project_api.models.deployment_cloud_params import DeploymentCloudParams  # noqa: F401,E501
from project_api import util


class Deployment(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, uuid: str=None, display_name: str=None, description: str=None, last_update_time: datetime=None, last_deploy_result: str=None, cloud_params: DeploymentCloudParams=None, leaf: List[Device]=None, gateway: List[Device]=None):  # noqa: E501
        """Deployment - a model defined in Swagger

        :param uuid: The uuid of this Deployment.  # noqa: E501
        :type uuid: str
        :param display_name: The display_name of this Deployment.  # noqa: E501
        :type display_name: str
        :param description: The description of this Deployment.  # noqa: E501
        :type description: str
        :param last_update_time: The last_update_time of this Deployment.  # noqa: E501
        :type last_update_time: datetime
        :param last_deploy_result: The last_deploy_result of this Deployment.  # noqa: E501
        :type last_deploy_result: str
        :param cloud_params: The cloud_params of this Deployment.  # noqa: E501
        :type cloud_params: DeploymentCloudParams
        :param leaf: The leaf of this DeploymentConfiguration.  # noqa: E501
        :type leaf: List[Device]
        :param gateway: The gateway of this DeploymentConfiguration.  # noqa: E501
        :type gateway: List[Device]
        """
        self.swagger_types = {
            'uuid': str,
            'display_name': str,
            'description': str,
            'last_update_time': datetime,
            'last_deploy_result': str,
            'cloud_params': DeploymentCloudParams,
            'leaf': List[Device],
            'gateway': List[Device]
        }

        self.attribute_map = {
            'uuid': 'uuid',
            'display_name': 'display_name',
            'description': 'description',
            'last_update_time': 'last_update_time',
            'last_deploy_result': 'last_deploy_result',
            'cloud_params': 'cloud_params',
            'leaf': 'leaf',
            'gateway': 'gateway'
        }
        self._uuid = uuid
        self._display_name = display_name
        self._description = description
        self._last_update_time = last_update_time
        self._last_deploy_result = last_deploy_result
        self._cloud_params = cloud_params
        self._leaf = leaf
        self._gateway = gateway

    @classmethod
    def from_dict(cls, dikt) -> 'Deployment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Deployment of this Deployment.  # noqa: E501
        :rtype: Deployment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uuid(self) -> str:
        """Gets the uuid of this Deployment.


        :return: The uuid of this Deployment.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this Deployment.


        :param uuid: The uuid of this Deployment.
        :type uuid: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def display_name(self) -> str:
        """Gets the display_name of this Deployment.


        :return: The display_name of this Deployment.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name: str):
        """Sets the display_name of this Deployment.


        :param display_name: The display_name of this Deployment.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def description(self) -> str:
        """Gets the description of this Deployment.


        :return: The description of this Deployment.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Deployment.


        :param description: The description of this Deployment.
        :type description: str
        """

        self._description = description

    @property
    def last_update_time(self) -> datetime:
        """Gets the last_deploy_time of this Deployment.


        :return: The last_deploy_time of this Deployment.
        :rtype: datetime
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time: datetime):
        """Sets the last_deploy_time of this Deployment.


        :param last_deploy_time: The last_deploy_time of this Deployment.
        :type last_deploy_time: datetime
        """

        self._last_update_time = last_update_time

    @property
    def last_deploy_result(self) -> str:
        """Gets the last_deploy_result of this Deployment.


        :return: The last_deploy_result of this Deployment.
        :rtype: str
        """
        return self._last_deploy_result

    @last_deploy_result.setter
    def last_deploy_result(self, last_deploy_result: str):
        """Sets the last_deploy_result of this Deployment.


        :param last_deploy_result: The last_deploy_result of this Deployment.
        :type last_deploy_result: str
        """
        allowed_values = ["error", "success"]  # noqa: E501
        if last_deploy_result not in allowed_values:
            raise ValueError(
                "Invalid value for `last_deploy_result` ({0}), must be one of {1}"
                .format(last_deploy_result, allowed_values)
            )

        self._last_deploy_result = last_deploy_result

    @property
    def cloud_params(self) -> DeploymentCloudParams:
        """Gets the cloud_params of this Deployment.


        :return: The cloud_params of this Deployment.
        :rtype: DeploymentCloudParams
        """
        return self._cloud_params

    @cloud_params.setter
    def cloud_params(self, cloud_params: DeploymentCloudParams):
        """Sets the cloud_params of this Deployment.


        :param cloud_params: The cloud_params of this Deployment.
        :type cloud_params: DeploymentCloudParams
        """
        if cloud_params is None:
            raise ValueError("Invalid value for `cloud_params`, must not be `None`")  # noqa: E501

        self._cloud_params = cloud_params
    
    @property
    def leaf(self) -> List[Device]:
        """Gets the leaf of this DeploymentConfiguration.


        :return: The leaf of this DeploymentConfiguration.
        :rtype: List[Device]
        """
        return self._leaf

    @leaf.setter
    def leaf(self, leaf: List[Device]):
        """Sets the leaf of this DeploymentConfiguration.


        :param leaf: The leaf of this DeploymentConfiguration.
        :type leaf: List[Device]
        """
        if leaf is None:
            raise ValueError("Invalid value for `leaf`, must not be `None`")  # noqa: E501

        self._leaf = leaf

    @property
    def gateway(self) -> List[Device]:
        """Gets the gateway of this DeploymentConfiguration.


        :return: The gateway of this DeploymentConfiguration.
        :rtype: List[Device]
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway: List[Device]):
        """Sets the gateway of this DeploymentConfiguration.


        :param gateway: The gateway of this DeploymentConfiguration.
        :type gateway: List[Device]
        """
        if gateway is None:
            raise ValueError("Invalid value for `gateway`, must not be `None`")  # noqa: E501

        self._gateway = gateway
