# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import Dict, List  # noqa: F401

from project_api import util
from project_api.models.base_model_ import Model
from project_api.models.dataset import Dataset
from project_api.models.input_type import InputType  # noqa: F401,E501
from project_api.models.model_target import ModelTarget  # noqa: F401,E501
from project_api.models.model_type import ModelType  # noqa: F401,E501
from project_api.models.output_type import OutputType  # noqa: F401,E501
from project_api.models.training_type import TrainingType  # noqa: F401,E501


class NewModel(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, model_name_to_clone: str=None, name: str=None, model_type: ModelType=None, dataset: Dataset=None, classes: List[str]=None, model_target: ModelTarget=None, creation_time: str=None, last_update_time: str=None, model_owner_uuid: str=None):  # noqa: E501
        """NewModel - a model defined in Swagger

        :param name: The name of this NewModel.  # noqa: E501
        :type name: str
        :param model_type: The model_type of this NewModel.  # noqa: E501
        :type model_type: ModelType
        :param dataset: The dataset used by this Model.  # noqa: E501
        :type dataset: Dataset
        :param classes: The classes of this NewModel.  # noqa: E501
        :type classes: List[str]
        :param model_target: The target of this NewModel.  # noqa: E501
        :type model_target: ModelTarget
        """
        self.swagger_types = {
            'model_name_to_clone': str,
            'name': str,
            'model_type': ModelType,
            'dataset': Dataset,
            'classes': List[str],
            # 'training_type': TrainingType,
            'target': ModelTarget,
            # 'output_type': OutputType,
            'creation_time': str,
            'last_update_time': str,
            'model_owner_uuid': str
        }

        self.attribute_map = {
            'model_name_to_clone': 'model_name_to_clone',
            'name': 'name',
            'model_type': 'model_type',
            'dataset': 'dataset',
            'classes': 'classes',
            # 'training_type': 'training_type',
            'target': 'target',
            # 'output_type': 'output_type',
            'creation_time': 'creation_time',
            'last_update_time': 'last_update_time',
            'model_owner_uuid': 'model_owner_uuid'

        }
        self._model_name_to_clone = model_name_to_clone
        self._name = name
        self._model_type = model_type
        self._dataset = dataset
        self._classes = classes
        # self._training_type = training_type
        self._target = model_target
        # self._output_type = output_type
        self._model_owner_uuid = model_owner_uuid

    @classmethod
    def from_dict(cls, dikt) -> 'NewModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NewModel of this NewModel.  # noqa: E501
        :rtype: NewModel
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model_name_to_clone(self) -> str:
        """Gets the model_name_to_clone of this NewModel.


        :return: The model_name_to_clone of this NewModel.
        :rtype: str
        """
        return self._model_name_to_clone

    @model_name_to_clone.setter
    def model_name_to_clone(self, name: str):
        """Sets the model_name_to_clone of this NewModel.


        :param name: The model_name_to_clone of this NewModel.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `model_name_to_clone`, must not be `None`")  # noqa: E501

        self._model_name_to_clone = name

    @property
    def name(self) -> str:
        """Gets the name of this NewModel.


        :return: The name of this NewModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this NewModel.


        :param name: The name of this NewModel.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def model_type(self) -> ModelType:
        """Gets the model_type of this NewModel.


        :return: The model_type of this NewModel.
        :rtype: ModelType
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type: ModelType):
        """Sets the model_type of this NewModel.


        :param model_type: The model_type of this NewModel.
        :type model_type: ModelType
        """
        if model_type is None:
            raise ValueError("Invalid value for `model_type`, must not be `None`")  # noqa: E501

        self._model_type = model_type

    @property
    def dataset(self) -> Dataset:
        """Gets the dataset of this Model.


        :return: The dataset of this Model.
        :rtype: Dataset
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset: Dataset):
        """Sets the dataset of this Model.


        :param dataset: The dataset_ref of this Model.
        :type dataset: Dataset
        """
        if dataset is None:
            raise ValueError("Invalid value for `dataset`, must not be `None`")  # noqa: E501

        self._dataset = dataset

    @property
    def classes(self) -> List[str]:
        """Gets the classes of this NewModel.


        :return: The classes of this NewModel.
        :rtype: List[str]
        """
        return self._classes

    @classes.setter
    def classes(self, classes: List[str]):
        """Sets the classes of this NewModel.


        :param classes: The classes of this NewModel.
        :type classes: List[str]
        """

        self._classes = classes

    # @property
    # def training_type(self) -> TrainingType:
    #     """Gets the training_type of this NewModel.


    #     :return: The training_type of this NewModel.
    #     :rtype: TrainingType
    #     """
    #     return self._training_type

    # @training_type.setter
    # def training_type(self, training_type: TrainingType):
    #     """Sets the training_type of this NewModel.


    #     :param training_type: The training_type of this NewModel.
    #     :type training_type: TrainingType
    #     """
    #     if training_type is None:
    #         raise ValueError("Invalid value for `training_type`, must not be `None`")  # noqa: E501

    #     self._training_type = training_type

    @property
    def target(self) -> ModelTarget:
        """Gets the input_type of this NewModel.


        :return: The input_type of this NewModel.
        :rtype: InputType
        """
        return self._target

    @target.setter
    def target(self, model_target: ModelTarget):
        """Sets the model_target of this NewModel.


        :param model_target: The model_target of this NewModel.
        :type model_target: ModelTarget
        """
        if model_target is None:
            raise ValueError("Invalid value for `model_target`, must not be `None`")  # noqa: E501

        self._target = model_target

    # @property
    # def output_type(self) -> OutputType:
    #     """Gets the output_type of this NewModel.


    #     :return: The output_type of this NewModel.
    #     :rtype: OutputType
    #     """
    #     return self._output_type

    # @output_type.setter
    # def output_type(self, output_type: OutputType):
    #     """Sets the output_type of this NewModel.


    #     :param output_type: The output_type of this NewModel.
    #     :type output_type: OutputType
    #     """
    #     if output_type is None:
    #         raise ValueError("Invalid value for `output_type`, must not be `None`")  # noqa: E501

    #     self._output_type = output_type

    @property
    def creation_time(self) -> str:
        """Gets the creation_time of this Project.


        :return: The creation_time of this Project.
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time: str=None):
        """Sets the creation_time of this Project.


        :param creation_time: The creation_time of this Project.
        :type creation_time: str
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")  # noqa: E501

        self._creation_time = str(datetime.now())

    @property
    def last_update_time(self) -> str:
        """Gets the last_update_time of this Project.


        :return: The last_update_time of this Project.
        :rtype: str
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time: str):
        """Sets the last_update_time of this Project.


        :param last_update_time: The last_update_time of this Project.
        :type last_update_time: str
        """
        if last_update_time is None:
            raise ValueError("Invalid value for `last_update_time`, must not be `None`")  # noqa: E501
        self._last_update_time = last_update_time

    @property
    def model_owner_uuid(self) -> str:
        """Gets the model_owner_uuid of this NewModel.


        :return: The model_owner_uuid of this NewModel.
        :rtype: str
        """
        return self._model_owner_uuid

    @model_owner_uuid.setter
    def model_owner_uuid(self, model_owner_uuid: str):
        """Sets the model_owner_uuid of this NewModel.


        :param model_owner_uuid: The model_owner_uuid of this NewModel.
        :type model_owner_uuid: str
        """

        self._model_owner_uuid = model_owner_uuid
