# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import Dict, List  # noqa: F401

from project_api import util
from project_api.models.base_model_ import Model


class Test(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, uuid: str=None, name: str=None, experiment_ref: str=None, model_file: str=None, parameters: object=None, reports: List[str]=None, outputs: List[str]=None):  # noqa: E501
        """Test - a model defined in Swagger

        :param uuid: The uuid of this Test.  # noqa: E501
        :type uuid: str
        :param name: The name of this Test.  # noqa: E501
        :type name: str
        :param experiment_ref: The experiment_ref of this Test.  # noqa: E501
        :type experiment_ref: str
        :param model_file: The model_file of this Test.  # noqa: E501
        :type model_file: str
        :param parameters: The parameters of this Test.  # noqa: E501
        :type parameters: object
        :param reports: The reports of this Test.  # noqa: E501
        :type reports: List[str]
        :param outputs: The outputs of this Test.  # noqa: E501
        :type outputs: List[str]
        """
        self.swagger_types = {
            'uuid': str,
            'name': str,
            'experiment_ref': str,
            'model_file': str,
            'parameters': object,
            'reports': List[str],
            'outputs': List[str]
        }

        self.attribute_map = {
            'uuid': 'uuid',
            'name': 'name',
            'experiment_ref': 'experiment_ref',
            'model_file': 'model_file',
            'parameters': 'parameters',
            'reports': 'reports',
            'outputs': 'outputs'
        }
        self._uuid = uuid
        self._name = name
        self._experiment_ref = experiment_ref
        self._model_file = model_file
        self._parameters = parameters
        self._reports = reports
        self._outputs = outputs

    @classmethod
    def from_dict(cls, dikt) -> 'Test':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Test of this Test.  # noqa: E501
        :rtype: Test
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uuid(self) -> str:
        """Gets the uuid of this Test.


        :return: The uuid of this Test.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this Test.


        :param uuid: The uuid of this Test.
        :type uuid: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def name(self) -> str:
        """Gets the name of this Test.


        :return: The name of this Test.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Test.


        :param name: The name of this Test.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def experiment_ref(self) -> str:
        """Gets the experiment_ref of this Test.


        :return: The experiment_ref of this Test.
        :rtype: str
        """
        return self._experiment_ref

    @experiment_ref.setter
    def experiment_ref(self, experiment_ref: str):
        """Sets the experiment_ref of this Test.


        :param experiment_ref: The experiment_ref of this Test.
        :type experiment_ref: str
        """
        if experiment_ref is None:
            raise ValueError("Invalid value for `experiment_ref`, must not be `None`")  # noqa: E501

        self._experiment_ref = experiment_ref

    @property
    def model_file(self) -> str:
        """Gets the model_file of this Test.


        :return: The model_file of this Test.
        :rtype: str
        """
        return self._model_file

    @model_file.setter
    def model_file(self, model_file: str):
        """Sets the model_file of this Test.


        :param model_file: The model_file of this Test.
        :type model_file: str
        """

        self._model_file = model_file

    @property
    def parameters(self) -> object:
        """Gets the parameters of this Test.


        :return: The parameters of this Test.
        :rtype: object
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: object):
        """Sets the parameters of this Test.


        :param parameters: The parameters of this Test.
        :type parameters: object
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")  # noqa: E501

        self._parameters = parameters

    @property
    def reports(self) -> List[str]:
        """Gets the reports of this Test.


        :return: The reports of this Test.
        :rtype: List[str]
        """
        return self._reports

    @reports.setter
    def reports(self, reports: List[str]):
        """Sets the reports of this Test.


        :param reports: The reports of this Test.
        :type reports: List[str]
        """
        if reports is None:
            raise ValueError("Invalid value for `reports`, must not be `None`")  # noqa: E501

        self._reports = reports

    @property
    def outputs(self) -> List[str]:
        """Gets the outputs of this Test.


        :return: The outputs of this Test.
        :rtype: List[str]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs: List[str]):
        """Sets the outputs of this Test.


        :param outputs: The outputs of this Test.
        :type outputs: List[str]
        """
        if outputs is None:
            raise ValueError("Invalid value for `outputs`, must not be `None`")  # noqa: E501

        self._outputs = outputs
