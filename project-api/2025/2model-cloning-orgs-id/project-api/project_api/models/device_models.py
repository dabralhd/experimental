# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from project_api.models.base_model_ import Model
from project_api import util


class DeviceModels(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, model_name_reference: str=None, artifact_type: str=None, component_name: str=None):  # noqa: E501
        """DeviceModels - a model defined in Swagger

        :param name: The name of this DeviceModels.  # noqa: E501
        :type name: str
        :param model_name_reference: The model_name_reference of this DeviceModels.  # noqa: E501
        :type model_name_reference: str
        :param artifact_type: The artifact_type of this DeviceModels.  # noqa: E501
        :type artifact_type: str
        :param component_name: The component_name of this DeviceModels.  # noqa: E501
        :type component_name: str
        """
        self.swagger_types = {
            "model_name_reference": str,
            "artifact_type": str,
            "component_name": str
        }

        self.attribute_map = {
            'model_name_reference': 'model_name_reference',
            'artifact_type': 'artifact_type',
            'component_name': 'component_name'
        }
        self._model_name_reference = model_name_reference
        self._artifact_type = artifact_type
        self._component_name = component_name

    @classmethod
    def from_dict(cls, dikt) -> 'DeviceModels':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Device_models of this DeviceModels.  # noqa: E501
        :rtype: DeviceModels
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model_name_reference(self) -> str:
        """Gets the model_name_reference of this DeviceModels.


        :return: The model_name_reference of this DeviceModels.
        :rtype: str
        """
        return self._model_name_reference

    @model_name_reference.setter
    def model_name_reference(self, model_name_reference: str):
        """Sets the name of this DeviceModels.


        :param name: The name of this DeviceModels.
        :type name: str
        """

        self._model_name_reference = model_name_reference

    @property
    def artifact_type(self) -> str:
        """Gets the artifact_type of this DeviceModels.


        :return: The artifact_type of this DeviceModels.
        :rtype: str
        """
        return self._artifact_type

    @artifact_type.setter
    def artifact_type(self, artifact_type: str):
        """Sets the artifact_type of this DeviceModels.


        :param artifact_type: The artifact_type of this DeviceModels.
        :type artifact_type: str
        """

        self._artifact_type = artifact_type

    @property
    def component_name(self) -> str:
        """Gets the component_name of this DeviceModels.


        :return: The component_name of this DeviceModels.
        :rtype: str
        """
        return self._component_name

    @component_name.setter
    def component_name(self, component_name: str):
        """Sets the inference of this DeviceModels.


        :param component_name: The component_name of this DeviceModels.
        :type component_name: str
        """

        self._component_name = component_name
