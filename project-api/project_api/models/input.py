# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import Dict, List  # noqa: F401

from project_api import util
from project_api.models.base_model_ import Model
from project_api.models.input_type import InputType  # noqa: F401,E501
from project_api.models.log import Log  # noqa: F401,E501
from project_api.models.tool import Tool  # noqa: F401,E501


class Input(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, uuid: str=None, input_type: InputType=None, model_ref: str=None, augmentation: List[str]=None, logs: List[Log]=None, tools: List[Tool]=None):  # noqa: E501
        """Input - a model defined in Swagger

        :param uuid: The uuid of this Input.  # noqa: E501
        :type uuid: str
        :param input_type: The input_type of this Input.  # noqa: E501
        :type input_type: InputType
        :param model_ref: The model_ref of this Input.  # noqa: E501
        :type model_ref: str
        :param augmentation: The augmentation of this Input.  # noqa: E501
        :type augmentation: List[str]
        :param logs: The logs of this Input.  # noqa: E501
        :type logs: List[Log]
        :param tools: The tools of this Input.  # noqa: E501
        :type tools: List[Tool]
        """
        self.swagger_types = {
            'uuid': str,
            'input_type': InputType,
            'model_ref': str,
            'augmentation': List[str],
            'logs': List[Log],
            'tools': List[Tool]
        }

        self.attribute_map = {
            'uuid': 'uuid',
            'input_type': 'input_type',
            'model_ref': 'model_ref',
            'augmentation': 'augmentation',
            'logs': 'logs',
            'tools': 'tools'
        }
        self._uuid = uuid
        self._input_type = input_type
        self._model_ref = model_ref
        self._augmentation = augmentation
        self._logs = logs
        self._tools = tools

    @classmethod
    def from_dict(cls, dikt) -> 'Input':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Input of this Input.  # noqa: E501
        :rtype: Input
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uuid(self) -> str:
        """Gets the uuid of this Input.


        :return: The uuid of this Input.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this Input.


        :param uuid: The uuid of this Input.
        :type uuid: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def input_type(self) -> InputType:
        """Gets the input_type of this Input.


        :return: The input_type of this Input.
        :rtype: InputType
        """
        return self._input_type

    @input_type.setter
    def input_type(self, input_type: InputType):
        """Sets the input_type of this Input.


        :param input_type: The input_type of this Input.
        :type input_type: InputType
        """
        if input_type is None:
            raise ValueError("Invalid value for `input_type`, must not be `None`")  # noqa: E501

        self._input_type = input_type

    @property
    def model_ref(self) -> str:
        """Gets the model_ref of this Input.


        :return: The model_ref of this Input.
        :rtype: str
        """
        return self._model_ref

    @model_ref.setter
    def model_ref(self, model_ref: str):
        """Sets the model_ref of this Input.


        :param model_ref: The model_ref of this Input.
        :type model_ref: str
        """
        if model_ref is None:
            raise ValueError("Invalid value for `model_ref`, must not be `None`")  # noqa: E501

        self._model_ref = model_ref

    @property
    def augmentation(self) -> List[str]:
        """Gets the augmentation of this Input.


        :return: The augmentation of this Input.
        :rtype: List[str]
        """
        return self._augmentation

    @augmentation.setter
    def augmentation(self, augmentation: List[str]):
        """Sets the augmentation of this Input.


        :param augmentation: The augmentation of this Input.
        :type augmentation: List[str]
        """
        if augmentation is None:
            raise ValueError("Invalid value for `augmentation`, must not be `None`")  # noqa: E501

        self._augmentation = augmentation

    @property
    def logs(self) -> List[Log]:
        """Gets the logs of this Input.


        :return: The logs of this Input.
        :rtype: List[Log]
        """
        return self._logs

    @logs.setter
    def logs(self, logs: List[Log]):
        """Sets the logs of this Input.


        :param logs: The logs of this Input.
        :type logs: List[Log]
        """
        if logs is None:
            raise ValueError("Invalid value for `logs`, must not be `None`")  # noqa: E501

        self._logs = logs

    @property
    def tools(self) -> List[Tool]:
        """Gets the tools of this Input.


        :return: The tools of this Input.
        :rtype: List[Tool]
        """
        return self._tools

    @tools.setter
    def tools(self, tools: List[Tool]):
        """Sets the tools of this Input.


        :param tools: The tools of this Input.
        :type tools: List[Tool]
        """
        if tools is None:
            raise ValueError("Invalid value for `tools`, must not be `None`")  # noqa: E501

        self._tools = tools
