# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import Dict, List  # noqa: F401

from project_api import util
from project_api.models.base_model_ import Model
from project_api.models.dataset import Dataset
from project_api.models.model_model_metadata import (  # noqa: F401,E501
    ModelModelMetadata,
)
from project_api.models.model_target import ModelTarget  # noqa: F401,E501
from project_api.models.training import Training


class Model(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, uuid: str=None, name: str=None, dataset: Dataset=None, model_metadata: ModelModelMetadata=None, model_target: ModelTarget=None, model_training: Training=None, data_sufficiency: Training=None, creation_time: str=None, last_update_time: str=None):  # noqa: E501
        """Model - a model defined in Swagger

        :param uuid: The uuid of this Model.  # noqa: E501
        :type uuid: str
        :param name: The name of this Model.  # noqa: E501
        :type name: str
        :param dataset: The dataset used by this Model.  # noqa: E501
        :type dataset: Dataset
        :param model_metadata: The model_metadata of this Model.  # noqa: E501
        :type model_metadata: ModelModelMetadata
        :param model_target: The target of this Model.  # noqa: E501
        :type model_target: ModelTarget
        :param training: The training details of this Model.  # noqa: E501
        :type training: Training
        :param data_sufficiency: The data sufficiency details of this Model.  # noqa: E501
        :type data_sufficiency: Training
        """
        self.swagger_types = {
            'uuid': str,
            'name': str,
            'dataset': Dataset,
            'metadata': ModelModelMetadata,
            'target': ModelTarget,
            'training': Training,
            'data_sufficiency': Training,
            'creation_time': str,
            'last_update_time': str
        }

        self.attribute_map = {
            'uuid': 'uuid',
            'name': 'name',
            'dataset': 'dataset',
            'metadata': 'metadata',
            'target': 'target',
            'training': 'training',
            'data_sufficiency': 'data_sufficiency',
            'creation_time': 'creation_time',
            'last_update_time': 'last_update_time'            
        }
        self._uuid = uuid
        self._name = name
        self._dataset = dataset
        self._metadata = model_metadata
        self._target = model_target
        self._training = model_training
        self._data_sufficiency = data_sufficiency
        self._creation_time = creation_time
        self._last_update_time = last_update_time     

    @classmethod
    def from_dict(cls, dikt) -> 'Model':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Model of this Model.  # noqa: E501
        :rtype: Model
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uuid(self) -> str:
        """Gets the uuid of this Model.


        :return: The uuid of this Model.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this Model.


        :param uuid: The uuid of this Model.
        :type uuid: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def name(self) -> str:
        """Gets the name of this Model.


        :return: The name of this Model.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Model.


        :param name: The name of this Model.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def dataset(self) -> Dataset:
        """Gets the dataset of this Model.


        :return: The dataset of this Model.
        :rtype: Dataset
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset: Dataset):
        """Sets the dataset of this Model.


        :param dataset: The dataset of this Model.
        :type dataset: Dataset
        """
        if dataset is None:
            raise ValueError("Invalid value for `dataset`, must not be `None`")  # noqa: E501

        self._dataset = dataset

    @property
    def metadata(self) -> ModelModelMetadata:
        """Gets the model_metadata of this Model.


        :return: The model_metadata of this Model.
        :rtype: ModelModelMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, model_metadata: ModelModelMetadata):
        """Sets the model_metadata of this Model.


        :param model_metadata: The model_metadata of this Model.
        :type model_metadata: ModelModelMetadata
        """
        if model_metadata is None:
            raise ValueError("Invalid value for `model_metadata`, must not be `None`")  # noqa: E501

        self._metadata = model_metadata

    @property
    def target(self) -> ModelTarget:
        """Gets the target of this Model.


        :return: The target of this Model.
        :rtype: InputType
        """
        return self._target

    @target.setter
    def target(self, model_target: ModelTarget):
        """Sets the model_target of this Model.


        :param model_target: The model_target of this Model.
        :type model_target: ModelTarget
        """
        if model_target is None:
            raise ValueError("Invalid value for `model_target`, must not be `None`")  # noqa: E501

        self._target = model_target
    
    @property
    def training(self) -> Training:
        """Gets the training of this Model.


        :return: The training of this Model.
        :rtype: Training
        """
        return self._training

    @training.setter
    def training(self, model_training: Training):
        """Sets the model_target of this Model.


        :param model_training: The model_training of this Model.
        :type model_training: Training
        """
        # if model_training is None:
        #     raise ValueError("Invalid value for `model_training`, must not be `None`")  # noqa: E501

        self._training = model_training

    @property
    def data_sufficiency(self) -> Training:
        """Gets the data_sufficiency of this Model.


        :return: The data_sufficiency of this Model.
        :rtype: Training
        """
        return self._data_sufficiency

    @data_sufficiency.setter
    def data_sufficiency(self, data_sufficiency: Training):
        """Sets the data_sufficiency of this Model.


        :param data_sufficiency: The model_training of this Model.
        :type data_sufficiency: Training
        """
        # if data_sufficiency is None:
        #     raise ValueError("Invalid value for `data_sufficiency`, must not be `None`")  # noqa: E501

        self._data_sufficiency = data_sufficiency

    @property
    def creation_time(self) -> str:
        """Gets the creation_time of this Project.


        :return: The creation_time of this Project.
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time: str=None):
        """Sets the creation_time of this Project.


        :param creation_time: The creation_time of this Project.
        :type creation_time: str
        """
        self._creation_time = str(datetime.now())

    @property
    def last_update_time(self) -> str:
        """Gets the last_update_time of this Project.


        :return: The last_update_time of this Project.
        :rtype: str
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time: str):
        """Sets the last_update_time of this Project.


        :param last_update_time: The last_update_time of this Project.
        :type last_update_time: str
        """
        self._last_update_time = str(datetime.now())
