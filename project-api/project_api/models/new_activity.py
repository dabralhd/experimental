# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import Dict, List  # noqa: F401

from project_api import util
from project_api.models.base_model_ import Model


class NewActivity(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, type: str=None, configuration: str=None, reports: List=None, artifacts: List=None):  # noqa: E501
        """NewActivity - a activity defined in Swagger

        :param tool: The name of the tool in this Activity.  # noqa: E501
        :type tool: str
        :param tool_version: The version of this tool.  # noqa: E501
        :type tool_version: str
        """
        self.swagger_types = {
            'activity_type': str,
            'type': str,
            'configuration': str,
            'reports': List[str],
            'artifacts': List[str]
        }

        self.attribute_map = {
            'activity_type': 'activity_type',
            'type': 'type',
            'configuration': 'configuration',
            'reports': 'reports',
            'artifacts': 'artifacts'
        }
        self._activity_type = _activity_type,
        self._type = type
        self._configuration = configuration
        self._reports = reports
        self._artifacts = artifacts

    @classmethod
    def from_dict(cls, dikt) -> 'NewActivity':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NewActivity of this NewActivity.  # noqa: E501
        :rtype: NewActivity
        """
        return util.deserialize_model(dikt, cls)
    
    @property
    def activity_type(self) -> str:
        """Gets the activity_type of this NewActivity.


        :return: The activity_type of this NewActivity.
        :rtype: str
        """
        return self._activity_type

    @activity_type.setter
    def activity_type(self, activity_type: str):
        """Sets the activity_type of this NewActivity.


        :param activity_type: The activity_type of this NewActivity.
        :type activity_type: str
        """
        if activity_type is None:
            raise ValueError("Invalid value for `activity_type`, must not be `None`")  # noqa: E501

        self._activity_type = activity_type
    

    @property
    def type(self) -> str:
        """Gets the type of this NewActivity.


        :return: The type of this NewActivity.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the tool of this NewActivity.


        :param tool: The tool of this NewActivity.
        :type tool: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def configuration(self) -> str:
        """Gets the name of this Pipeline.


        :return: The name of this Pipeline.
        :rtype: str
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration: str):
        """Sets the name of this Pipeline.


        :param name: The name of this Pipeline.
        :type name: str
        """
        if configuration is None:
            raise ValueError("Invalid value for `configuration`, must not be `None`")  # noqa: E501

        self._configuration = configuration

    @property
    def reports(self) -> List[str]:
        """Gets the description of this Pipeline.


        :return: The description of this Pipeline.
        :rtype: str
        """
        return self._reports

    @reports.setter
    def reports(self, reports: List[str]):
        """Sets the description of this Pipeline.


        :param description: The description of this Pipeline.
        :type description: str
        """
        if reports is None:
            raise ValueError("Invalid value for `reports`, must not be `None`")  # noqa: E501

        self._reports = reports

    @property
    def artifacts(self) -> List[str]:
        """Gets the description of this Pipeline.


        :return: The description of this Pipeline.
        :rtype: str
        """
        return self._artifacts

    @artifacts.setter
    def artifacts(self, artifacts: List[str]):
        """Sets the description of this Pipeline.


        :param description: The description of this Pipeline.
        :type description: str
        """
        if artifacts is None:
            raise ValueError("Invalid value for `artifacts`, must not be `None`")  # noqa: E501

        self._artifacts = artifacts
        
