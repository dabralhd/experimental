# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.model_type import ModelType  # noqa: F401,E501
from swagger_server import util


class ModelModelMetadata(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, type: ModelType=None, classes: List[str]=None):  # noqa: E501
        """ModelModelMetadata - a model defined in Swagger

        :param type: The type of this ModelModelMetadata.  # noqa: E501
        :type type: ModelType
        :param classes: The classes of this ModelModelMetadata.  # noqa: E501
        :type classes: List[str]
        """
        self.swagger_types = {
            'type': ModelType,
            'classes': List[str]
        }

        self.attribute_map = {
            'type': 'type',
            'classes': 'classes'
        }
        self._type = type
        self._classes = classes

    @classmethod
    def from_dict(cls, dikt) -> 'ModelModelMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Model_model_metadata of this ModelModelMetadata.  # noqa: E501
        :rtype: ModelModelMetadata
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> ModelType:
        """Gets the type of this ModelModelMetadata.


        :return: The type of this ModelModelMetadata.
        :rtype: ModelType
        """
        return self._type

    @type.setter
    def type(self, type: ModelType):
        """Sets the type of this ModelModelMetadata.


        :param type: The type of this ModelModelMetadata.
        :type type: ModelType
        """

        self._type = type

    @property
    def classes(self) -> List[str]:
        """Gets the classes of this ModelModelMetadata.


        :return: The classes of this ModelModelMetadata.
        :rtype: List[str]
        """
        return self._classes

    @classes.setter
    def classes(self, classes: List[str]):
        """Sets the classes of this ModelModelMetadata.


        :param classes: The classes of this ModelModelMetadata.
        :type classes: List[str]
        """

        self._classes = classes
