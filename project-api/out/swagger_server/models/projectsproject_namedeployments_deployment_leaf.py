# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.projectsproject_namedeployments_deployment_datalogging import ProjectsprojectNamedeploymentsDeploymentDatalogging  # noqa: F401,E501
from swagger_server.models.projectsproject_namedeployments_deployment_inference import ProjectsprojectNamedeploymentsDeploymentInference  # noqa: F401,E501
from swagger_server import util


class ProjectsprojectNamedeploymentsDeploymentLeaf(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, gateway_id: str=None, device_id: str=None, application: str=None, description: str=None, display_name: str=None, datalogging: ProjectsprojectNamedeploymentsDeploymentDatalogging=None, inference: ProjectsprojectNamedeploymentsDeploymentInference=None):  # noqa: E501
        """ProjectsprojectNamedeploymentsDeploymentLeaf - a model defined in Swagger

        :param gateway_id: The gateway_id of this ProjectsprojectNamedeploymentsDeploymentLeaf.  # noqa: E501
        :type gateway_id: str
        :param device_id: The device_id of this ProjectsprojectNamedeploymentsDeploymentLeaf.  # noqa: E501
        :type device_id: str
        :param application: The application of this ProjectsprojectNamedeploymentsDeploymentLeaf.  # noqa: E501
        :type application: str
        :param description: The description of this ProjectsprojectNamedeploymentsDeploymentLeaf.  # noqa: E501
        :type description: str
        :param display_name: The display_name of this ProjectsprojectNamedeploymentsDeploymentLeaf.  # noqa: E501
        :type display_name: str
        :param datalogging: The datalogging of this ProjectsprojectNamedeploymentsDeploymentLeaf.  # noqa: E501
        :type datalogging: ProjectsprojectNamedeploymentsDeploymentDatalogging
        :param inference: The inference of this ProjectsprojectNamedeploymentsDeploymentLeaf.  # noqa: E501
        :type inference: ProjectsprojectNamedeploymentsDeploymentInference
        """
        self.swagger_types = {
            'gateway_id': str,
            'device_id': str,
            'application': str,
            'description': str,
            'display_name': str,
            'datalogging': ProjectsprojectNamedeploymentsDeploymentDatalogging,
            'inference': ProjectsprojectNamedeploymentsDeploymentInference
        }

        self.attribute_map = {
            'gateway_id': 'gateway_id',
            'device_id': 'device_id',
            'application': 'application',
            'description': 'description',
            'display_name': 'display_name',
            'datalogging': 'datalogging',
            'inference': 'inference'
        }
        self._gateway_id = gateway_id
        self._device_id = device_id
        self._application = application
        self._description = description
        self._display_name = display_name
        self._datalogging = datalogging
        self._inference = inference

    @classmethod
    def from_dict(cls, dikt) -> 'ProjectsprojectNamedeploymentsDeploymentLeaf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The projectsproject_namedeployments_deployment_leaf of this ProjectsprojectNamedeploymentsDeploymentLeaf.  # noqa: E501
        :rtype: ProjectsprojectNamedeploymentsDeploymentLeaf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gateway_id(self) -> str:
        """Gets the gateway_id of this ProjectsprojectNamedeploymentsDeploymentLeaf.


        :return: The gateway_id of this ProjectsprojectNamedeploymentsDeploymentLeaf.
        :rtype: str
        """
        return self._gateway_id

    @gateway_id.setter
    def gateway_id(self, gateway_id: str):
        """Sets the gateway_id of this ProjectsprojectNamedeploymentsDeploymentLeaf.


        :param gateway_id: The gateway_id of this ProjectsprojectNamedeploymentsDeploymentLeaf.
        :type gateway_id: str
        """

        self._gateway_id = gateway_id

    @property
    def device_id(self) -> str:
        """Gets the device_id of this ProjectsprojectNamedeploymentsDeploymentLeaf.


        :return: The device_id of this ProjectsprojectNamedeploymentsDeploymentLeaf.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id: str):
        """Sets the device_id of this ProjectsprojectNamedeploymentsDeploymentLeaf.


        :param device_id: The device_id of this ProjectsprojectNamedeploymentsDeploymentLeaf.
        :type device_id: str
        """

        self._device_id = device_id

    @property
    def application(self) -> str:
        """Gets the application of this ProjectsprojectNamedeploymentsDeploymentLeaf.


        :return: The application of this ProjectsprojectNamedeploymentsDeploymentLeaf.
        :rtype: str
        """
        return self._application

    @application.setter
    def application(self, application: str):
        """Sets the application of this ProjectsprojectNamedeploymentsDeploymentLeaf.


        :param application: The application of this ProjectsprojectNamedeploymentsDeploymentLeaf.
        :type application: str
        """

        self._application = application

    @property
    def description(self) -> str:
        """Gets the description of this ProjectsprojectNamedeploymentsDeploymentLeaf.


        :return: The description of this ProjectsprojectNamedeploymentsDeploymentLeaf.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this ProjectsprojectNamedeploymentsDeploymentLeaf.


        :param description: The description of this ProjectsprojectNamedeploymentsDeploymentLeaf.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self) -> str:
        """Gets the display_name of this ProjectsprojectNamedeploymentsDeploymentLeaf.


        :return: The display_name of this ProjectsprojectNamedeploymentsDeploymentLeaf.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name: str):
        """Sets the display_name of this ProjectsprojectNamedeploymentsDeploymentLeaf.


        :param display_name: The display_name of this ProjectsprojectNamedeploymentsDeploymentLeaf.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def datalogging(self) -> ProjectsprojectNamedeploymentsDeploymentDatalogging:
        """Gets the datalogging of this ProjectsprojectNamedeploymentsDeploymentLeaf.


        :return: The datalogging of this ProjectsprojectNamedeploymentsDeploymentLeaf.
        :rtype: ProjectsprojectNamedeploymentsDeploymentDatalogging
        """
        return self._datalogging

    @datalogging.setter
    def datalogging(self, datalogging: ProjectsprojectNamedeploymentsDeploymentDatalogging):
        """Sets the datalogging of this ProjectsprojectNamedeploymentsDeploymentLeaf.


        :param datalogging: The datalogging of this ProjectsprojectNamedeploymentsDeploymentLeaf.
        :type datalogging: ProjectsprojectNamedeploymentsDeploymentDatalogging
        """

        self._datalogging = datalogging

    @property
    def inference(self) -> ProjectsprojectNamedeploymentsDeploymentInference:
        """Gets the inference of this ProjectsprojectNamedeploymentsDeploymentLeaf.


        :return: The inference of this ProjectsprojectNamedeploymentsDeploymentLeaf.
        :rtype: ProjectsprojectNamedeploymentsDeploymentInference
        """
        return self._inference

    @inference.setter
    def inference(self, inference: ProjectsprojectNamedeploymentsDeploymentInference):
        """Sets the inference of this ProjectsprojectNamedeploymentsDeploymentLeaf.


        :param inference: The inference of this ProjectsprojectNamedeploymentsDeploymentLeaf.
        :type inference: ProjectsprojectNamedeploymentsDeploymentInference
        """

        self._inference = inference
