# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Tool(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, description: str=None, version: str=None, container_name: str=None, container_version: str=None, parameters: object=None):  # noqa: E501
        """Tool - a model defined in Swagger

        :param name: The name of this Tool.  # noqa: E501
        :type name: str
        :param description: The description of this Tool.  # noqa: E501
        :type description: str
        :param version: The version of this Tool.  # noqa: E501
        :type version: str
        :param container_name: The container_name of this Tool.  # noqa: E501
        :type container_name: str
        :param container_version: The container_version of this Tool.  # noqa: E501
        :type container_version: str
        :param parameters: The parameters of this Tool.  # noqa: E501
        :type parameters: object
        """
        self.swagger_types = {
            'name': str,
            'description': str,
            'version': str,
            'container_name': str,
            'container_version': str,
            'parameters': object
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'version': 'version',
            'container_name': 'container_name',
            'container_version': 'container_version',
            'parameters': 'parameters'
        }
        self._name = name
        self._description = description
        self._version = version
        self._container_name = container_name
        self._container_version = container_version
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt) -> 'Tool':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Tool of this Tool.  # noqa: E501
        :rtype: Tool
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Tool.


        :return: The name of this Tool.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Tool.


        :param name: The name of this Tool.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this Tool.


        :return: The description of this Tool.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Tool.


        :param description: The description of this Tool.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def version(self) -> str:
        """Gets the version of this Tool.


        :return: The version of this Tool.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this Tool.


        :param version: The version of this Tool.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def container_name(self) -> str:
        """Gets the container_name of this Tool.


        :return: The container_name of this Tool.
        :rtype: str
        """
        return self._container_name

    @container_name.setter
    def container_name(self, container_name: str):
        """Sets the container_name of this Tool.


        :param container_name: The container_name of this Tool.
        :type container_name: str
        """

        self._container_name = container_name

    @property
    def container_version(self) -> str:
        """Gets the container_version of this Tool.


        :return: The container_version of this Tool.
        :rtype: str
        """
        return self._container_version

    @container_version.setter
    def container_version(self, container_version: str):
        """Sets the container_version of this Tool.


        :param container_version: The container_version of this Tool.
        :type container_version: str
        """

        self._container_version = container_version

    @property
    def parameters(self) -> object:
        """Gets the parameters of this Tool.


        :return: The parameters of this Tool.
        :rtype: object
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: object):
        """Sets the parameters of this Tool.


        :param parameters: The parameters of this Tool.
        :type parameters: object
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")  # noqa: E501

        self._parameters = parameters
