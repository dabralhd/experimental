# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Target(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, type: str=None, component: str=None, device: str=None):  # noqa: E501
        """Target - a model defined in Swagger

        :param type: The type of this Target.  # noqa: E501
        :type type: str
        :param component: The component of this Target.  # noqa: E501
        :type component: str
        :param device: The device of this Target.  # noqa: E501
        :type device: str
        """
        self.swagger_types = {
            'type': str,
            'component': str,
            'device': str
        }

        self.attribute_map = {
            'type': 'type',
            'component': 'component',
            'device': 'device'
        }
        self._type = type
        self._component = component
        self._device = device

    @classmethod
    def from_dict(cls, dikt) -> 'Target':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Target of this Target.  # noqa: E501
        :rtype: Target
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this Target.


        :return: The type of this Target.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Target.


        :param type: The type of this Target.
        :type type: str
        """

        self._type = type

    @property
    def component(self) -> str:
        """Gets the component of this Target.


        :return: The component of this Target.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component: str):
        """Sets the component of this Target.


        :param component: The component of this Target.
        :type component: str
        """

        self._component = component

    @property
    def device(self) -> str:
        """Gets the device of this Target.


        :return: The device of this Target.
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device: str):
        """Sets the device of this Target.


        :param device: The device of this Target.
        :type device: str
        """

        self._device = device
